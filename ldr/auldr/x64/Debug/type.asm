; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?to_upper@@YAHH@Z				; to_upper
PUBLIC	?to_lower@@YAHH@Z				; to_lower
PUBLIC	?is_digit@@YAHH@Z				; is_digit
pdata	SEGMENT
$pdata$?is_digit@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+46
	DD	imagerel $unwind$?is_digit@@YAHH@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?is_digit@@YAHH@Z DD 010801H
	DD	02208H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\type.cpp
_TEXT	SEGMENT
tv66 = 0
c$ = 32
?is_digit@@YAHH@Z PROC					; is_digit

; 20   : int is_digit(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 21   : 	return ((c >= '0') && (c <= '9'));

	cmp	DWORD PTR c$[rsp], 48			; 00000030H
	jl	SHORT $LN3@is_digit
	cmp	DWORD PTR c$[rsp], 57			; 00000039H
	jg	SHORT $LN3@is_digit
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@is_digit
$LN3@is_digit:
	mov	DWORD PTR tv66[rsp], 0
$LN4@is_digit:
	mov	eax, DWORD PTR tv66[rsp]

; 22   : }

	add	rsp, 24
	ret	0
?is_digit@@YAHH@Z ENDP					; is_digit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\type.cpp
_TEXT	SEGMENT
c$ = 8
?to_lower@@YAHH@Z PROC					; to_lower

; 14   : int to_lower(int c){

	mov	DWORD PTR [rsp+8], ecx

; 15   : 	if ((c >= 'A') && (c <= 'Z'))

	cmp	DWORD PTR c$[rsp], 65			; 00000041H
	jl	SHORT $LN1@to_lower
	cmp	DWORD PTR c$[rsp], 90			; 0000005aH
	jg	SHORT $LN1@to_lower

; 16   : 		return (c + ('a' - 'A'));

	mov	eax, DWORD PTR c$[rsp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@to_lower
$LN1@to_lower:

; 17   : 	return c;

	mov	eax, DWORD PTR c$[rsp]
$LN2@to_lower:

; 18   : }

	ret	0
?to_lower@@YAHH@Z ENDP					; to_lower
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\type.cpp
_TEXT	SEGMENT
c$ = 8
?to_upper@@YAHH@Z PROC					; to_upper

; 8    : int to_upper(int c) {

	mov	DWORD PTR [rsp+8], ecx

; 9    : 	if ((c >= 'a') && (c <= 'z'))

	cmp	DWORD PTR c$[rsp], 97			; 00000061H
	jl	SHORT $LN1@to_upper
	cmp	DWORD PTR c$[rsp], 122			; 0000007aH
	jg	SHORT $LN1@to_upper

; 10   : 		return (c - ('a' - 'A'));

	mov	eax, DWORD PTR c$[rsp]
	sub	eax, 32					; 00000020H
	jmp	SHORT $LN2@to_upper
$LN1@to_upper:

; 11   : 	return c;

	mov	eax, DWORD PTR c$[rsp]
$LN2@to_upper:

; 12   : }

	ret	0
?to_upper@@YAHH@Z ENDP					; to_upper
_TEXT	ENDS
END
