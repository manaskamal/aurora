; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	memset
PUBLIC	?memcpy@@YAXPEAX0I@Z				; memcpy
PUBLIC	?wstrchr@@YAPEA_WPEA_WH@Z			; wstrchr
PUBLIC	?wstrlen@@YAHPEA_W@Z				; wstrlen
PUBLIC	?wstrsize@@YAIPEA_W@Z				; wstrsize
PUBLIC	?strlen@@YA_KPEBD@Z				; strlen
pdata	SEGMENT
$pdata$memset DD imagerel $LN5
	DD	imagerel $LN5+83
	DD	imagerel $unwind$memset
$pdata$?memcpy@@YAXPEAX0I@Z DD imagerel $LN10
	DD	imagerel $LN10+277
	DD	imagerel $unwind$?memcpy@@YAXPEAX0I@Z
$pdata$?wstrlen@@YAHPEA_W@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$?wstrlen@@YAHPEA_W@Z
$pdata$?wstrsize@@YAIPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$?wstrsize@@YAIPEA_W@Z
$pdata$?strlen@@YA_KPEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?strlen@@YA_KPEBD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$memset DD 011201H
	DD	02212H
$unwind$?memcpy@@YAXPEAX0I@Z DD 011301H
	DD	04213H
$unwind$?wstrlen@@YAHPEA_W@Z DD 010901H
	DD	02209H
$unwind$?wstrsize@@YAIPEA_W@Z DD 010901H
	DD	04209H
$unwind$?strlen@@YA_KPEBD@Z DD 010901H
	DD	02209H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\string.cpp
_TEXT	SEGMENT
tv69 = 0
len$ = 8
str$ = 32
?strlen@@YA_KPEBD@Z PROC				; strlen

; 69   : size_t strlen(const char* str){

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 70   : 	size_t len = 0;

	mov	QWORD PTR len$[rsp], 0
$LN2@strlen:

; 71   : 	while (str[len++]);

	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv69[rsp], eax
	mov	rax, QWORD PTR len$[rsp]
	inc	rax
	mov	QWORD PTR len$[rsp], rax
	cmp	DWORD PTR tv69[rsp], 0
	je	SHORT $LN1@strlen
	jmp	SHORT $LN2@strlen
$LN1@strlen:

; 72   : 	return len;

	mov	rax, QWORD PTR len$[rsp]

; 73   : }

	add	rsp, 24
	ret	0
?strlen@@YA_KPEBD@Z ENDP				; strlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\string.cpp
_TEXT	SEGMENT
s$ = 48
?wstrsize@@YAIPEA_W@Z PROC				; wstrsize

; 64   : uint32_t wstrsize(wchar_t *s) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 65   : 	return (wstrlen(s) + 1) * sizeof(unsigned short);

	mov	rcx, QWORD PTR s$[rsp]
	call	?wstrlen@@YAHPEA_W@Z			; wstrlen
	inc	eax
	cdqe
	shl	rax, 1

; 66   : }

	add	rsp, 40					; 00000028H
	ret	0
?wstrsize@@YAIPEA_W@Z ENDP				; wstrsize
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\string.cpp
_TEXT	SEGMENT
i$ = 0
s$ = 32
?wstrlen@@YAHPEA_W@Z PROC				; wstrlen

; 57   : int wstrlen(wchar_t *s) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 58   : 	int i = 0;

	mov	DWORD PTR i$[rsp], 0
$LN2@wstrlen:

; 59   : 	while (*s)

	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN1@wstrlen

; 60   : 		i++, s++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN2@wstrlen
$LN1@wstrlen:

; 61   : 	return i;

	mov	eax, DWORD PTR i$[rsp]

; 62   : }

	add	rsp, 24
	ret	0
?wstrlen@@YAHPEA_W@Z ENDP				; wstrlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\string.cpp
_TEXT	SEGMENT
s$ = 8
c$ = 16
?wstrchr@@YAPEA_WPEA_WH@Z PROC				; wstrchr

; 47   : wchar_t *wstrchr(wchar_t *s, int c) {

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
$LN3@wstrchr:

; 48   : 	while (*s) {

	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN2@wstrchr

; 49   : 		if (*s == c)

	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR c$[rsp]
	jne	SHORT $LN1@wstrchr

; 50   : 			return s;

	mov	rax, QWORD PTR s$[rsp]
	jmp	SHORT $LN4@wstrchr
$LN1@wstrchr:

; 51   : 		s++;

	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR s$[rsp], rax

; 52   : 	}

	jmp	SHORT $LN3@wstrchr
$LN2@wstrchr:

; 53   : 
; 54   : 	return 0;

	xor	eax, eax
$LN4@wstrchr:

; 55   : }

	ret	0
?wstrchr@@YAPEA_WPEA_WH@Z ENDP				; wstrchr
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\string.cpp
_TEXT	SEGMENT
tv77 = 0
tv82 = 4
t$ = 8
s$ = 16
targ$ = 48
src$ = 56
len$ = 64
?memcpy@@YAXPEAX0I@Z PROC				; memcpy

; 29   : void memcpy(void *targ, void *src, uint32_t len) {

$LN10:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 30   : 	uint8_t *t = (uint8_t *)targ;

	mov	rax, QWORD PTR targ$[rsp]
	mov	QWORD PTR t$[rsp], rax

; 31   : 	uint8_t *s = (uint8_t *)src;

	mov	rax, QWORD PTR src$[rsp]
	mov	QWORD PTR s$[rsp], rax

; 32   : 	if (len > 0) {

	cmp	DWORD PTR len$[rsp], 0
	jbe	$LN7@memcpy

; 33   : 		// check to see if target is in the range of src and if so, do a memmove() instead
; 34   : 		if ((t > s) && (t < (s + len))){

	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR t$[rsp], rax
	jbe	$LN6@memcpy
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR t$[rsp], rax
	jae	SHORT $LN6@memcpy

; 35   : 			t += (len - 1);

	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR t$[rsp], rax

; 36   : 			s += (len - 1);

	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$[rsp], rax
$LN5@memcpy:

; 37   : 			while (len--)

	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR tv77[rsp], eax
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR tv77[rsp], 0
	je	SHORT $LN4@memcpy

; 38   : 				*t-- = *s++;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR t$[rsp]
	dec	rax
	mov	QWORD PTR t$[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN5@memcpy
$LN4@memcpy:

; 39   : 		}
; 40   : 		else {

	jmp	SHORT $LN3@memcpy
$LN6@memcpy:
$LN2@memcpy:

; 41   : 			while (len--)

	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR tv82[rsp], eax
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR tv82[rsp], 0
	je	SHORT $LN1@memcpy

; 42   : 				*t++ = *s++;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR t$[rsp]
	inc	rax
	mov	QWORD PTR t$[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN2@memcpy
$LN1@memcpy:
$LN3@memcpy:
$LN7@memcpy:

; 43   : 		}
; 44   : 	}
; 45   : }

	add	rsp, 40					; 00000028H
	ret	0
?memcpy@@YAXPEAX0I@Z ENDP				; memcpy
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\string.cpp
_TEXT	SEGMENT
tv66 = 0
t$ = 8
targ$ = 32
val$ = 40
len$ = 48
memset	PROC

; 17   : void memset(void *targ, uint8_t val, uint32_t len){

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 18   : 	uint8_t *t = (uint8_t*)targ;

	mov	rax, QWORD PTR targ$[rsp]
	mov	QWORD PTR t$[rsp], rax
$LN2@memset:

; 19   : 	while (len--)

	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN1@memset

; 20   : 		*t++ = val;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, BYTE PTR val$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR t$[rsp]
	inc	rax
	mov	QWORD PTR t$[rsp], rax
	jmp	SHORT $LN2@memset
$LN1@memset:

; 21   : }

	add	rsp, 24
	ret	0
memset	ENDP
_TEXT	ENDS
END
