; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?page_stack@@3PEA_KEA				; page_stack
PUBLIC	?stack_ptr@@3PEA_KEA				; stack_ptr
PUBLIC	?allocated_stack@@3PEA_KEA			; allocated_stack
PUBLIC	?allocated_ptr@@3PEA_KEA			; allocated_ptr
PUBLIC	?rsvd_mem_first@@3PEAU_reserved_mem_@@EA	; rsvd_mem_first
PUBLIC	?rsvd_mem_last@@3PEAU_reserved_mem_@@EA		; rsvd_mem_last
_BSS	SEGMENT
?page_stack@@3PEA_KEA DQ 01H DUP (?)			; page_stack
?stack_ptr@@3PEA_KEA DQ 01H DUP (?)			; stack_ptr
?allocated_stack@@3PEA_KEA DQ 01H DUP (?)		; allocated_stack
?allocated_ptr@@3PEA_KEA DQ 01H DUP (?)			; allocated_ptr
?rsvd_mem_first@@3PEAU_reserved_mem_@@EA DQ 01H DUP (?)	; rsvd_mem_first
?rsvd_mem_last@@3PEAU_reserved_mem_@@EA DQ 01H DUP (?)	; rsvd_mem_last
_BSS	ENDS
CONST	SEGMENT
$SG13341 DB	'[auldr]: reserved memory -> %x ', 0aH, 00H
CONST	ENDS
PUBLIC	?au_initialize_pmmngr@@YAXUEfiMemoryMap@@PEAX_K@Z ; au_initialize_pmmngr
PUBLIC	?au_pmmngr_allocate@@YA_KXZ			; au_pmmngr_allocate
PUBLIC	?au_pmmngr_free@@YAX_K@Z			; au_pmmngr_free
PUBLIC	?au_print_reserved_mem@@YAXXZ			; au_print_reserved_mem
PUBLIC	?au_get_rsvd_mem_count@@YAHXZ			; au_get_rsvd_mem_count
PUBLIC	?au_get_phys_allocated@@YAPEAXXZ		; au_get_phys_allocated
PUBLIC	?au_initialize_vm@@YAXXZ			; au_initialize_vm
PUBLIC	?au_map_p2v@@YA_N_K00@Z				; au_map_p2v
PUBLIC	?au_insert_reserved_mem@@YAXPEAU_reserved_mem_@@@Z ; au_insert_reserved_mem
PUBLIC	?au_reserved_mem_remove@@YAXPEAU_reserved_mem_@@@Z ; au_reserved_mem_remove
PUBLIC	??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z		; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>
PUBLIC	??$raw_diff@UEFI_MEMORY_DESCRIPTOR@@U1@@@YAHPEAUEFI_MEMORY_DESCRIPTOR@@0@Z ; raw_diff<EFI_MEMORY_DESCRIPTOR,EFI_MEMORY_DESCRIPTOR>
PUBLIC	??$raw_diff@_K_K@@YAHPEA_K0@Z			; raw_diff<unsigned __int64,unsigned __int64>
PUBLIC	??$raw_offset@PEAUEFI_MEMORY_DESCRIPTOR@@PEAU1@@@YAPEAUEFI_MEMORY_DESCRIPTOR@@PEAU0@H@Z ; raw_offset<EFI_MEMORY_DESCRIPTOR * __ptr64,EFI_MEMORY_DESCRIPTOR * __ptr64>
PUBLIC	?au_get_rsvd_mem_first@@YAPEAXXZ		; au_get_rsvd_mem_first
PUBLIC	?set_pml4_recursive@@YAPEA_KPEA_K_K@Z		; set_pml4_recursive
PUBLIC	?pml4_index@@YA_K_K@Z				; pml4_index
PUBLIC	?pdp_index@@YA_K_K@Z				; pdp_index
PUBLIC	?pd_index@@YA_K_K@Z				; pd_index
PUBLIC	?pt_index@@YA_K_K@Z				; pt_index
PUBLIC	?p_index@@YA_K_K@Z				; p_index
EXTRN	?au_print@@YAXPEBDZZ:PROC			; au_print
EXTRN	?aulib_free@@YAXPEAX@Z:PROC			; aulib_free
EXTRN	au_read_cr3:PROC
EXTRN	au_write_cr3:PROC
EXTRN	au_mfence:PROC
EXTRN	au_flush_tlb:PROC
EXTRN	au_write_cr0:PROC
EXTRN	au_read_cr0:PROC
EXTRN	memset:PROC
_BSS	SEGMENT
rsvd_mem_count DD 01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$?au_initialize_pmmngr@@YAXUEfiMemoryMap@@PEAX_K@Z DD imagerel $LN12
	DD	imagerel $LN12+428
	DD	imagerel $unwind$?au_initialize_pmmngr@@YAXUEfiMemoryMap@@PEAX_K@Z
$pdata$?au_pmmngr_allocate@@YA_KXZ DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?au_pmmngr_allocate@@YA_KXZ
$pdata$?au_print_reserved_mem@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+67
	DD	imagerel $unwind$?au_print_reserved_mem@@YAXXZ
$pdata$?au_initialize_vm@@YAXXZ DD imagerel $LN10
	DD	imagerel $LN10+273
	DD	imagerel $unwind$?au_initialize_vm@@YAXXZ
$pdata$?au_map_p2v@@YA_N_K00@Z DD imagerel $LN7
	DD	imagerel $LN7+582
	DD	imagerel $unwind$?au_map_p2v@@YA_N_K00@Z
$pdata$?au_reserved_mem_remove@@YAXPEAU_reserved_mem_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+148
	DD	imagerel $unwind$?au_reserved_mem_remove@@YAXPEAU_reserved_mem_@@@Z
$pdata$?make_canonical@@YAPEAXPEAX@Z DD imagerel ?make_canonical@@YAPEAXPEAX@Z
	DD	imagerel ?make_canonical@@YAPEAXPEAX@Z+24
	DD	imagerel $unwind$?make_canonical@@YAPEAXPEAX@Z
$pdata$?set_pml4_recursive@@YAPEA_KPEA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$?set_pml4_recursive@@YAPEA_KPEA_K_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?au_initialize_pmmngr@@YAXUEfiMemoryMap@@PEAX_K@Z DD 011301H
	DD	08213H
$unwind$?au_pmmngr_allocate@@YA_KXZ DD 010401H
	DD	02204H
$unwind$?au_print_reserved_mem@@YAXXZ DD 010401H
	DD	06204H
$unwind$?au_initialize_vm@@YAXXZ DD 010401H
	DD	0c204H
$unwind$?au_map_p2v@@YA_N_K00@Z DD 011301H
	DD	0e213H
$unwind$?au_reserved_mem_remove@@YAXPEAU_reserved_mem_@@@Z DD 010901H
	DD	04209H
$unwind$?make_canonical@@YAPEAXPEAX@Z DD 010901H
	DD	04209H
$unwind$?set_pml4_recursive@@YAPEA_KPEA_K_K@Z DD 010e01H
	DD	0620eH
xdata	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
addr$ = 8
?p_index@@YA_K_K@Z PROC					; p_index

; 243  : size_t p_index(uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 244  : 	return (addr & 0x7ff);

	mov	rax, QWORD PTR addr$[rsp]
	and	rax, 2047				; 000007ffH

; 245  : }

	ret	0
?p_index@@YA_K_K@Z ENDP					; p_index
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
addr$ = 8
?pt_index@@YA_K_K@Z PROC				; pt_index

; 239  : size_t pt_index(uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 240  : 	return (addr >> 12) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 12
	and	rax, 511				; 000001ffH

; 241  : }

	ret	0
?pt_index@@YA_K_K@Z ENDP				; pt_index
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
addr$ = 8
?pd_index@@YA_K_K@Z PROC				; pd_index

; 235  : size_t pd_index(uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 236  : 	return (addr >> 21) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 21
	and	rax, 511				; 000001ffH

; 237  : }

	ret	0
?pd_index@@YA_K_K@Z ENDP				; pd_index
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
addr$ = 8
?pdp_index@@YA_K_K@Z PROC				; pdp_index

; 231  : size_t pdp_index(uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 232  : 	return (addr >> 30) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 30
	and	rax, 511				; 000001ffH

; 233  : }

	ret	0
?pdp_index@@YA_K_K@Z ENDP				; pdp_index
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
addr$ = 8
?pml4_index@@YA_K_K@Z PROC				; pml4_index

; 227  : size_t  pml4_index(uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 228  : 	return (addr >> 39) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 39					; 00000027H
	and	rax, 511				; 000001ffH

; 229  : }

	ret	0
?pml4_index@@YA_K_K@Z ENDP				; pml4_index
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
new_pml4$ = 32
pml4$ = 64
slot$ = 72
?set_pml4_recursive@@YAPEA_KPEA_K_K@Z PROC		; set_pml4_recursive

; 187  : size_t* set_pml4_recursive(size_t* pml4, size_t slot) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 188  : 	pml4[slot] = (size_t)pml4 | 0x1 | 0x2;

	mov	rax, QWORD PTR pml4$[rsp]
	or	rax, 1
	or	rax, 2
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	rdx, QWORD PTR slot$[rsp]
	mov	QWORD PTR [rcx+rdx*8], rax

; 189  : 	void* new_pml4 = make_canonical((void*)((slot << 39) | (slot << 30) | (slot << 21) | (slot << 12)));

	mov	rax, QWORD PTR slot$[rsp]
	shl	rax, 39					; 00000027H
	mov	rcx, QWORD PTR slot$[rsp]
	shl	rcx, 30
	or	rax, rcx
	mov	rcx, QWORD PTR slot$[rsp]
	shl	rcx, 21
	or	rax, rcx
	mov	rcx, QWORD PTR slot$[rsp]
	shl	rcx, 12
	or	rax, rcx
	mov	rcx, rax
	call	?make_canonical@@YAPEAXPEAX@Z		; make_canonical
	mov	QWORD PTR new_pml4$[rsp], rax

; 190  : 	au_write_cr3((uint64_t)au_read_cr3());

	call	au_read_cr3
	mov	rcx, rax
	call	au_write_cr3

; 191  : 	return (size_t*)new_pml4;

	mov	rax, QWORD PTR new_pml4$[rsp]

; 192  : }

	add	rsp, 56					; 00000038H
	ret	0
?set_pml4_recursive@@YAPEA_KPEA_K_K@Z ENDP		; set_pml4_recursive
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
addr$ = 8
?decanonical@@YA_KPEAX@Z PROC				; decanonical

; 182  : {

	mov	QWORD PTR [rsp+8], rcx

; 183  : 	return (size_t)addr & 0x0000FFFFFFFFFFFF;

	mov	rax, 281474976710655			; 0000ffffffffffffH
	mov	rcx, QWORD PTR addr$[rsp]
	and	rcx, rax
	mov	rax, rcx

; 184  : }

	ret	0
?decanonical@@YA_KPEAX@Z ENDP				; decanonical
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
addr$ = 48
?make_canonical@@YAPEAXPEAX@Z PROC			; make_canonical

; 177  : {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 178  : 	return make_canonical_i((size_t)addr);

	mov	rcx, QWORD PTR addr$[rsp]
	call	?make_canonical_i@@YAPEAX_K@Z		; make_canonical_i

; 179  : }

	add	rsp, 40					; 00000028H
	ret	0
?make_canonical@@YAPEAXPEAX@Z ENDP			; make_canonical
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
addr$ = 8
?make_canonical_i@@YAPEAX_K@Z PROC			; make_canonical_i

; 170  : {

	mov	QWORD PTR [rsp+8], rcx

; 171  : 	if (addr & ((size_t)1 << 47))

	mov	rax, 140737488355328			; 0000800000000000H
	mov	rcx, QWORD PTR addr$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN1@make_canon

; 172  : 		addr |= 0xFFFF000000000000;

	mov	rax, -281474976710656			; ffff000000000000H
	mov	rcx, QWORD PTR addr$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR addr$[rsp], rax
$LN1@make_canon:

; 173  : 	return (void*)addr;

	mov	rax, QWORD PTR addr$[rsp]

; 174  : }

	ret	0
?make_canonical_i@@YAPEAX_K@Z ENDP			; make_canonical_i
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
?au_get_rsvd_mem_first@@YAPEAXXZ PROC			; au_get_rsvd_mem_first

; 149  : 	return rsvd_mem_first;

	mov	rax, QWORD PTR ?rsvd_mem_first@@3PEAU_reserved_mem_@@EA ; rsvd_mem_first

; 150  : }

	ret	0
?au_get_rsvd_mem_first@@YAPEAXXZ ENDP			; au_get_rsvd_mem_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\stdint.h
;	COMDAT ??$raw_offset@PEAUEFI_MEMORY_DESCRIPTOR@@PEAU1@@@YAPEAUEFI_MEMORY_DESCRIPTOR@@PEAU0@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAUEFI_MEMORY_DESCRIPTOR@@PEAU1@@@YAPEAUEFI_MEMORY_DESCRIPTOR@@PEAU0@H@Z PROC ; raw_offset<EFI_MEMORY_DESCRIPTOR * __ptr64,EFI_MEMORY_DESCRIPTOR * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAUEFI_MEMORY_DESCRIPTOR@@PEAU1@@@YAPEAUEFI_MEMORY_DESCRIPTOR@@PEAU0@H@Z ENDP ; raw_offset<EFI_MEMORY_DESCRIPTOR * __ptr64,EFI_MEMORY_DESCRIPTOR * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\stdint.h
;	COMDAT ??$raw_diff@_K_K@@YAHPEA_K0@Z
_TEXT	SEGMENT
p1$ = 8
p2$ = 16
??$raw_diff@_K_K@@YAHPEA_K0@Z PROC			; raw_diff<unsigned __int64,unsigned __int64>, COMDAT

; 179  : 	{

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 180  : 		return (intptr_t)p1 - (intptr_t)p2;

	mov	eax, DWORD PTR p2$[rsp]
	mov	ecx, DWORD PTR p1$[rsp]
	sub	ecx, eax
	mov	eax, ecx

; 181  : 	};

	ret	0
??$raw_diff@_K_K@@YAHPEA_K0@Z ENDP			; raw_diff<unsigned __int64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\stdint.h
;	COMDAT ??$raw_diff@UEFI_MEMORY_DESCRIPTOR@@U1@@@YAHPEAUEFI_MEMORY_DESCRIPTOR@@0@Z
_TEXT	SEGMENT
p1$ = 8
p2$ = 16
??$raw_diff@UEFI_MEMORY_DESCRIPTOR@@U1@@@YAHPEAUEFI_MEMORY_DESCRIPTOR@@0@Z PROC ; raw_diff<EFI_MEMORY_DESCRIPTOR,EFI_MEMORY_DESCRIPTOR>, COMDAT

; 179  : 	{

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 180  : 		return (intptr_t)p1 - (intptr_t)p2;

	mov	eax, DWORD PTR p2$[rsp]
	mov	ecx, DWORD PTR p1$[rsp]
	sub	ecx, eax
	mov	eax, ecx

; 181  : 	};

	ret	0
??$raw_diff@UEFI_MEMORY_DESCRIPTOR@@U1@@@YAHPEAUEFI_MEMORY_DESCRIPTOR@@0@Z ENDP ; raw_diff<EFI_MEMORY_DESCRIPTOR,EFI_MEMORY_DESCRIPTOR>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\stdint.h
;	COMDAT ??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z PROC		; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z ENDP		; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
mm$ = 48
?au_reserved_mem_remove@@YAXPEAU_reserved_mem_@@@Z PROC	; au_reserved_mem_remove

; 43   : void au_reserved_mem_remove(au_reserved_mem_t *mm) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 44   : 	if (mm == rsvd_mem_first) {

	mov	rax, QWORD PTR ?rsvd_mem_first@@3PEAU_reserved_mem_@@EA ; rsvd_mem_first
	cmp	QWORD PTR mm$[rsp], rax
	jne	SHORT $LN4@au_reserve

; 45   : 		rsvd_mem_first = rsvd_mem_first->next;

	mov	rax, QWORD PTR ?rsvd_mem_first@@3PEAU_reserved_mem_@@EA ; rsvd_mem_first
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR ?rsvd_mem_first@@3PEAU_reserved_mem_@@EA, rax ; rsvd_mem_first

; 46   : 	}
; 47   : 	else {

	jmp	SHORT $LN3@au_reserve
$LN4@au_reserve:

; 48   : 		mm->prev->next = mm->next;

	mov	rax, QWORD PTR mm$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR mm$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
$LN3@au_reserve:

; 49   : 	}
; 50   : 
; 51   : 	if (mm == rsvd_mem_last) {

	mov	rax, QWORD PTR ?rsvd_mem_last@@3PEAU_reserved_mem_@@EA ; rsvd_mem_last
	cmp	QWORD PTR mm$[rsp], rax
	jne	SHORT $LN2@au_reserve

; 52   : 		rsvd_mem_last = mm->prev;

	mov	rax, QWORD PTR mm$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR ?rsvd_mem_last@@3PEAU_reserved_mem_@@EA, rax ; rsvd_mem_last

; 53   : 	}
; 54   : 	else {

	jmp	SHORT $LN1@au_reserve
$LN2@au_reserve:

; 55   : 		mm->next->prev = mm->prev;

	mov	rax, QWORD PTR mm$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR mm$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
$LN1@au_reserve:

; 56   : 	}
; 57   : 
; 58   : 	aulib_free(mm);

	mov	rcx, QWORD PTR mm$[rsp]
	call	?aulib_free@@YAXPEAX@Z			; aulib_free

; 59   : 	rsvd_mem_count--;

	mov	eax, DWORD PTR rsvd_mem_count
	dec	eax
	mov	DWORD PTR rsvd_mem_count, eax

; 60   : }

	add	rsp, 40					; 00000028H
	ret	0
?au_reserved_mem_remove@@YAXPEAU_reserved_mem_@@@Z ENDP	; au_reserved_mem_remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
mem$ = 8
?au_insert_reserved_mem@@YAXPEAU_reserved_mem_@@@Z PROC	; au_insert_reserved_mem

; 24   : void au_insert_reserved_mem(au_reserved_mem_t *mem) {

	mov	QWORD PTR [rsp+8], rcx

; 25   : 	mem->next = nullptr;

	mov	rax, QWORD PTR mem$[rsp]
	mov	QWORD PTR [rax+8], 0

; 26   : 	mem->prev = nullptr;

	mov	rax, QWORD PTR mem$[rsp]
	mov	QWORD PTR [rax+16], 0

; 27   : 
; 28   : 	if (rsvd_mem_first == NULL) {

	cmp	QWORD PTR ?rsvd_mem_first@@3PEAU_reserved_mem_@@EA, 0 ; rsvd_mem_first
	jne	SHORT $LN2@au_insert_

; 29   : 		rsvd_mem_first = mem;

	mov	rax, QWORD PTR mem$[rsp]
	mov	QWORD PTR ?rsvd_mem_first@@3PEAU_reserved_mem_@@EA, rax ; rsvd_mem_first

; 30   : 		rsvd_mem_last = mem;

	mov	rax, QWORD PTR mem$[rsp]
	mov	QWORD PTR ?rsvd_mem_last@@3PEAU_reserved_mem_@@EA, rax ; rsvd_mem_last

; 31   : 	}
; 32   : 	else {

	jmp	SHORT $LN1@au_insert_
$LN2@au_insert_:

; 33   : 		rsvd_mem_last->next = mem;

	mov	rax, QWORD PTR ?rsvd_mem_last@@3PEAU_reserved_mem_@@EA ; rsvd_mem_last
	mov	rcx, QWORD PTR mem$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 34   : 		mem->prev = rsvd_mem_last;

	mov	rax, QWORD PTR mem$[rsp]
	mov	rcx, QWORD PTR ?rsvd_mem_last@@3PEAU_reserved_mem_@@EA ; rsvd_mem_last
	mov	QWORD PTR [rax+16], rcx

; 35   : 		rsvd_mem_last = mem;

	mov	rax, QWORD PTR mem$[rsp]
	mov	QWORD PTR ?rsvd_mem_last@@3PEAU_reserved_mem_@@EA, rax ; rsvd_mem_last
$LN1@au_insert_:

; 36   : 	}
; 37   : 
; 38   : 	rsvd_mem_count++;

	mov	eax, DWORD PTR rsvd_mem_count
	inc	eax
	mov	DWORD PTR rsvd_mem_count, eax

; 39   : }

	ret	0
?au_insert_reserved_mem@@YAXPEAU_reserved_mem_@@@Z ENDP	; au_insert_reserved_mem
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
i2$ = 32
i4$ = 36
i3$ = 40
i1$ = 44
flags$ = 48
page$1 = 56
pml3$ = 64
page$2 = 72
page$3 = 80
pml2$ = 88
pml4i$ = 96
pml1$ = 104
vaddr$ = 128
paddr$ = 136
attrib$ = 144
?au_map_p2v@@YA_N_K00@Z PROC				; au_map_p2v

; 250  : bool au_map_p2v(uint64_t vaddr, uint64_t paddr, size_t attrib) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 251  : 	size_t flags = 0x1 | 0x2 | attrib;

	mov	rax, QWORD PTR attrib$[rsp]
	or	rax, 3
	mov	QWORD PTR flags$[rsp], rax

; 252  : 
; 253  : 	const long i4 = (decanonical((void*)vaddr) >> 39) & 0x1FF;

	mov	rcx, QWORD PTR vaddr$[rsp]
	call	?decanonical@@YA_KPEAX@Z		; decanonical
	shr	rax, 39					; 00000027H
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i4$[rsp], eax

; 254  : 	const long i3 = (vaddr >> 30) & 0x1FF;

	mov	rax, QWORD PTR vaddr$[rsp]
	shr	rax, 30
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i3$[rsp], eax

; 255  : 	const long i2 = (vaddr >> 21) & 0x1FF;

	mov	rax, QWORD PTR vaddr$[rsp]
	shr	rax, 21
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i2$[rsp], eax

; 256  : 	const long i1 = (vaddr >> 12) & 0x1FF;

	mov	rax, QWORD PTR vaddr$[rsp]
	shr	rax, 12
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i1$[rsp], eax

; 257  : 
; 258  : 	uint64_t *pml4i = (uint64_t*)au_read_cr3();

	call	au_read_cr3
	mov	QWORD PTR pml4i$[rsp], rax

; 259  : 
; 260  : 	if (!(pml4i[i4] & 0x1)) {

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN4@au_map_p2v

; 261  : 		const uint64_t page = (uint64_t)au_pmmngr_allocate();

	call	?au_pmmngr_allocate@@YA_KXZ		; au_pmmngr_allocate
	mov	QWORD PTR page$1[rsp], rax

; 262  : 		pml4i[i4] = page | flags;	

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$1[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i4$[rsp]
	mov	rdx, QWORD PTR pml4i$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 263  : 		memset((void*)page, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR page$1[rsp]
	call	memset

; 264  : 		au_flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$1[rsp]
	call	au_flush_tlb

; 265  : 		au_mfence();

	call	au_mfence
$LN4@au_map_p2v:

; 266  : 	}
; 267  : 
; 268  : 	uint64_t* pml3 = (uint64_t*)(pml4i[i4] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml3$[rsp], rax

; 269  : 
; 270  : 	if (!(pml3[i3] & 0x1)) {

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN3@au_map_p2v

; 271  : 		const uint64_t page = (uint64_t)au_pmmngr_allocate();

	call	?au_pmmngr_allocate@@YA_KXZ		; au_pmmngr_allocate
	mov	QWORD PTR page$3[rsp], rax

; 272  : 		pml3[i3] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$3[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i3$[rsp]
	mov	rdx, QWORD PTR pml3$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 273  : 		memset((void*)page, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR page$3[rsp]
	call	memset

; 274  : 		au_flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$3[rsp]
	call	au_flush_tlb

; 275  : 		au_mfence();

	call	au_mfence
$LN3@au_map_p2v:

; 276  : 	}
; 277  : 
; 278  : 	uint64_t* pml2 = (uint64_t*)(pml3[i3] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml2$[rsp], rax

; 279  : 	if (!(pml2[i2] & 0x1)) {

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN2@au_map_p2v

; 280  : 		const uint64_t page = (uint64_t)au_pmmngr_allocate();

	call	?au_pmmngr_allocate@@YA_KXZ		; au_pmmngr_allocate
	mov	QWORD PTR page$2[rsp], rax

; 281  : 		pml2[i2] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$2[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i2$[rsp]
	mov	rdx, QWORD PTR pml2$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 282  : 		memset((void*)page, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR page$2[rsp]
	call	memset

; 283  : 		au_flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$2[rsp]
	call	au_flush_tlb

; 284  : 		au_mfence();

	call	au_mfence
$LN2@au_map_p2v:

; 285  : 	}
; 286  : 
; 287  : 	uint64_t* pml1 = (uint64_t*)(pml2[i2] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml1$[rsp], rax

; 288  : 	if (pml1[i1] & 0x1) {

	movsxd	rax, DWORD PTR i1$[rsp]
	mov	rcx, QWORD PTR pml1$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN1@au_map_p2v

; 289  : 		return false;

	xor	al, al
	jmp	SHORT $LN5@au_map_p2v
$LN1@au_map_p2v:

; 290  : 	}
; 291  : 
; 292  : 	pml1[i1] = paddr | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR paddr$[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i1$[rsp]
	mov	rdx, QWORD PTR pml1$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 293  : 	au_flush_tlb((void*)vaddr);

	mov	rcx, QWORD PTR vaddr$[rsp]
	call	au_flush_tlb

; 294  : 	return true;

	mov	al, 1
$LN5@au_map_p2v:

; 295  : }

	add	rsp, 120				; 00000078H
	ret	0
?au_map_p2v@@YA_N_K00@Z ENDP				; au_map_p2v
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
i$1 = 32
x$2 = 40
new_cr3$ = 48
pml4$ = 56
pml_root$ = 64
cr0$ = 72
pml4ptr$ = 80
?au_initialize_vm@@YAXXZ PROC				; au_initialize_vm

; 198  : void au_initialize_vm() {

$LN10:
	sub	rsp, 104				; 00000068H

; 199  : 	uint64_t* pml_root = (uint64_t*)au_read_cr3();

	call	au_read_cr3
	mov	QWORD PTR pml_root$[rsp], rax

; 200  : 
; 201  : 	uint64_t* new_cr3 = (uint64_t*)au_pmmngr_allocate();

	call	?au_pmmngr_allocate@@YA_KXZ		; au_pmmngr_allocate
	mov	QWORD PTR new_cr3$[rsp], rax

; 202  : 	memset(new_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	memset

; 203  : 	for (int i = 0; i < 512; i++) 

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN7@au_initial
$LN6@au_initial:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN7@au_initial:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN5@au_initial

; 204  : 		new_cr3[i] = pml_root[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	r8, QWORD PTR pml_root$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
	jmp	SHORT $LN6@au_initial
$LN5@au_initial:

; 205  : 
; 206  : 	au_write_cr3((size_t)new_cr3);

	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	au_write_cr3

; 207  : 
; 208  : 
; 209  : 	void *pml4ptr = (void*)((size_t)pml_root & ~(size_t)0xFFF);

	mov	rax, QWORD PTR pml_root$[rsp]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml4ptr$[rsp], rax

; 210  : 	size_t* pml4 = (size_t*)pml4ptr;

	mov	rax, QWORD PTR pml4ptr$[rsp]
	mov	QWORD PTR pml4$[rsp], rax

; 211  : 
; 212  : 	size_t cr0 = au_read_cr0();

	call	au_read_cr0
	mov	QWORD PTR cr0$[rsp], rax

; 213  : 	au_write_cr0(cr0 & (SIZE_MAX - (1 << 16)));

	mov	eax, -65537				; fffeffffH
	mov	rcx, QWORD PTR cr0$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	au_write_cr0

; 214  : 
; 215  : 
; 216  : 	for (size_t x = (4096 / sizeof(size_t)); x > 0; --x) {

	mov	QWORD PTR x$2[rsp], 512			; 00000200H
	jmp	SHORT $LN4@au_initial
$LN3@au_initial:
	mov	rax, QWORD PTR x$2[rsp]
	dec	rax
	mov	QWORD PTR x$2[rsp], rax
$LN4@au_initial:
	cmp	QWORD PTR x$2[rsp], 0
	jbe	SHORT $LN2@au_initial

; 217  : 		if ((pml4[x - 1] & 0x1) == 0) {

	mov	rax, QWORD PTR pml4$[rsp]
	mov	rcx, QWORD PTR x$2[rsp]
	mov	rax, QWORD PTR [rax+rcx*8-8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN1@au_initial

; 218  : 			pml4 = set_pml4_recursive(pml4, x - 1);

	mov	rax, QWORD PTR x$2[rsp]
	dec	rax
	mov	rdx, rax
	mov	rcx, QWORD PTR pml4$[rsp]
	call	?set_pml4_recursive@@YAPEA_KPEA_K_K@Z	; set_pml4_recursive
	mov	QWORD PTR pml4$[rsp], rax

; 219  : 			break;

	jmp	SHORT $LN2@au_initial
$LN1@au_initial:

; 220  : 		}
; 221  : 	}

	jmp	SHORT $LN3@au_initial
$LN2@au_initial:

; 222  : 	
; 223  : 	au_write_cr0(cr0);

	mov	rcx, QWORD PTR cr0$[rsp]
	call	au_write_cr0

; 224  : }

	add	rsp, 104				; 00000068H
	ret	0
?au_initialize_vm@@YAXXZ ENDP				; au_initialize_vm
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
?au_get_phys_allocated@@YAPEAXXZ PROC			; au_get_phys_allocated

; 157  : 	return allocated_ptr;

	mov	rax, QWORD PTR ?allocated_ptr@@3PEA_KEA	; allocated_ptr

; 158  : }

	ret	0
?au_get_phys_allocated@@YAPEAXXZ ENDP			; au_get_phys_allocated
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
?au_get_rsvd_mem_count@@YAHXZ PROC			; au_get_rsvd_mem_count

; 165  : 	return rsvd_mem_count;

	mov	eax, DWORD PTR rsvd_mem_count

; 166  : }

	ret	0
?au_get_rsvd_mem_count@@YAHXZ ENDP			; au_get_rsvd_mem_count
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
rsvd$1 = 32
?au_print_reserved_mem@@YAXXZ PROC			; au_print_reserved_mem

; 138  : void au_print_reserved_mem() {

$LN6:
	sub	rsp, 56					; 00000038H

; 139  : 	for (au_reserved_mem_t *rsvd = rsvd_mem_first; rsvd != NULL; rsvd = rsvd->next) {

	mov	rax, QWORD PTR ?rsvd_mem_first@@3PEAU_reserved_mem_@@EA ; rsvd_mem_first
	mov	QWORD PTR rsvd$1[rsp], rax
	jmp	SHORT $LN3@au_print_r
$LN2@au_print_r:
	mov	rax, QWORD PTR rsvd$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR rsvd$1[rsp], rax
$LN3@au_print_r:
	cmp	QWORD PTR rsvd$1[rsp], 0
	je	SHORT $LN1@au_print_r

; 140  : 		au_print("[auldr]: reserved memory -> %x \n", rsvd->address);

	mov	rax, QWORD PTR rsvd$1[rsp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG13341
	call	?au_print@@YAXPEBDZZ			; au_print

; 141  : 	}

	jmp	SHORT $LN2@au_print_r
$LN1@au_print_r:

; 142  : }

	add	rsp, 56					; 00000038H
	ret	0
?au_print_reserved_mem@@YAXXZ ENDP			; au_print_reserved_mem
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
address$ = 8
?au_pmmngr_free@@YAX_K@Z PROC				; au_pmmngr_free

; 130  : void au_pmmngr_free(uint64_t address) {

	mov	QWORD PTR [rsp+8], rcx

; 131  : 	*stack_ptr++ = address;

	mov	rax, QWORD PTR ?stack_ptr@@3PEA_KEA	; stack_ptr
	mov	rcx, QWORD PTR address$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR ?stack_ptr@@3PEA_KEA	; stack_ptr
	add	rax, 8
	mov	QWORD PTR ?stack_ptr@@3PEA_KEA, rax	; stack_ptr

; 132  : 	
; 133  : }

	ret	0
?au_pmmngr_free@@YAX_K@Z ENDP				; au_pmmngr_free
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
allocated$1 = 0
?au_pmmngr_allocate@@YA_KXZ PROC			; au_pmmngr_allocate

; 110  : uint64_t au_pmmngr_allocate() {

$LN5:
	sub	rsp, 24

; 111  : 	if (stack_ptr == page_stack) {

	mov	rax, QWORD PTR ?page_stack@@3PEA_KEA	; page_stack
	cmp	QWORD PTR ?stack_ptr@@3PEA_KEA, rax	; stack_ptr
	jne	SHORT $LN2@au_pmmngr_

; 112  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@au_pmmngr_

; 113  : 	}else {

	jmp	SHORT $LN1@au_pmmngr_
$LN2@au_pmmngr_:

; 114  : 		uint64_t allocated = *--stack_ptr;

	mov	rax, QWORD PTR ?stack_ptr@@3PEA_KEA	; stack_ptr
	sub	rax, 8
	mov	QWORD PTR ?stack_ptr@@3PEA_KEA, rax	; stack_ptr
	mov	rax, QWORD PTR ?stack_ptr@@3PEA_KEA	; stack_ptr
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR allocated$1[rsp], rax

; 115  : 		*allocated_ptr++ = allocated;

	mov	rax, QWORD PTR ?allocated_ptr@@3PEA_KEA	; allocated_ptr
	mov	rcx, QWORD PTR allocated$1[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR ?allocated_ptr@@3PEA_KEA	; allocated_ptr
	add	rax, 8
	mov	QWORD PTR ?allocated_ptr@@3PEA_KEA, rax	; allocated_ptr

; 116  : 
; 117  : 		/* insert it into the reserved list */
; 118  : 		/*au_reserved_mem_t *rsvd = (au_reserved_mem_t*)aulib_allocate(sizeof(au_reserved_mem_t));
; 119  : 		rsvd->address = allocated;
; 120  : 		au_insert_reserved_mem(rsvd);*/
; 121  : 		rsvd_mem_count++;

	mov	eax, DWORD PTR rsvd_mem_count
	inc	eax
	mov	DWORD PTR rsvd_mem_count, eax

; 122  : 
; 123  : 		return allocated;

	mov	rax, QWORD PTR allocated$1[rsp]
$LN1@au_pmmngr_:
$LN3@au_pmmngr_:

; 124  : 	}
; 125  : }

	add	rsp, 24
	ret	0
?au_pmmngr_allocate@@YA_KXZ ENDP			; au_pmmngr_allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\aurora kernel\ldr\auldr\au_mm.cpp
_TEXT	SEGMENT
numpage$1 = 32
current$ = 40
addr$2 = 48
mem_blocks$ = 56
memmap$ = 80
buffer$ = 88
bufsize$ = 96
?au_initialize_pmmngr@@YAXUEfiMemoryMap@@PEAX_K@Z PROC	; au_initialize_pmmngr

; 68   : void au_initialize_pmmngr(struct EfiMemoryMap memmap, void* buffer, size_t bufsize) {

$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 69   : 	uint64_t mem_blocks = 0;

	mov	QWORD PTR mem_blocks$[rsp], 0

; 70   : 	stack_ptr = page_stack = (EFI_PHYSICAL_ADDRESS*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR ?page_stack@@3PEA_KEA, rax	; page_stack
	mov	rax, QWORD PTR ?page_stack@@3PEA_KEA	; page_stack
	mov	QWORD PTR ?stack_ptr@@3PEA_KEA, rax	; stack_ptr

; 71   : 
; 72   : 	rsvd_mem_first = nullptr;

	mov	QWORD PTR ?rsvd_mem_first@@3PEAU_reserved_mem_@@EA, 0 ; rsvd_mem_first

; 73   : 	rsvd_mem_last = nullptr;

	mov	QWORD PTR ?rsvd_mem_last@@3PEAU_reserved_mem_@@EA, 0 ; rsvd_mem_last

; 74   : 	rsvd_mem_count = 1;

	mov	DWORD PTR rsvd_mem_count, 1

; 75   : 
; 76   : 	bufsize /= 2;

	xor	edx, edx
	mov	rax, QWORD PTR bufsize$[rsp]
	mov	ecx, 2
	div	rcx
	mov	QWORD PTR bufsize$[rsp], rax

; 77   : 	allocated_ptr = allocated_stack = raw_offset<EFI_PHYSICAL_ADDRESS*>(buffer, bufsize);

	mov	edx, DWORD PTR bufsize$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z	; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>
	mov	QWORD PTR ?allocated_stack@@3PEA_KEA, rax ; allocated_stack
	mov	rax, QWORD PTR ?allocated_stack@@3PEA_KEA ; allocated_stack
	mov	QWORD PTR ?allocated_ptr@@3PEA_KEA, rax	; allocated_ptr

; 78   : 
; 79   : 	EFI_MEMORY_DESCRIPTOR *current = memmap.memmap;

	mov	rax, QWORD PTR memmap$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR current$[rsp], rax
$LN9@au_initial:

; 80   : 	while (raw_diff(current, memmap.memmap) < memmap.MemMapSize) {

	mov	rax, QWORD PTR memmap$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR current$[rsp]
	call	??$raw_diff@UEFI_MEMORY_DESCRIPTOR@@U1@@@YAHPEAUEFI_MEMORY_DESCRIPTOR@@0@Z ; raw_diff<EFI_MEMORY_DESCRIPTOR,EFI_MEMORY_DESCRIPTOR>
	cdqe
	mov	rcx, QWORD PTR memmap$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jae	$LN8@au_initial

; 81   : 		if (current->Type == EfiConventionalMemory) {

	mov	rax, QWORD PTR current$[rsp]
	cmp	DWORD PTR [rax], 7
	jne	$LN7@au_initial

; 82   : 			EFI_PHYSICAL_ADDRESS addr = current->PhysicalStart;

	mov	rax, QWORD PTR current$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR addr$2[rsp], rax

; 83   : 			size_t numpage = current->NumberOfPages;

	mov	rax, QWORD PTR current$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR numpage$1[rsp], rax

; 84   :  
; 85   : 			if (EFI_PAGE_SIZE < 4096) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN6@au_initial

; 86   : 				numpage /= (4096 / EFI_PAGE_SIZE);

	mov	rax, QWORD PTR numpage$1[rsp]
	mov	QWORD PTR numpage$1[rsp], rax
	jmp	SHORT $LN5@au_initial
$LN6@au_initial:

; 87   : 			}
; 88   : 			else if (EFI_PAGE_SIZE > 4096) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN4@au_initial

; 89   : 				numpage *= (EFI_PAGE_SIZE / 4096);

	mov	rax, QWORD PTR numpage$1[rsp]
	mov	QWORD PTR numpage$1[rsp], rax
$LN4@au_initial:
$LN5@au_initial:
$LN3@au_initial:

; 90   : 			}
; 91   : 		
; 92   : 			while (numpage > 0 && raw_diff(stack_ptr, page_stack) < bufsize) {

	cmp	QWORD PTR numpage$1[rsp], 0
	jbe	SHORT $LN2@au_initial
	mov	rdx, QWORD PTR ?page_stack@@3PEA_KEA	; page_stack
	mov	rcx, QWORD PTR ?stack_ptr@@3PEA_KEA	; stack_ptr
	call	??$raw_diff@_K_K@@YAHPEA_K0@Z		; raw_diff<unsigned __int64,unsigned __int64>
	cdqe
	cmp	rax, QWORD PTR bufsize$[rsp]
	jae	SHORT $LN2@au_initial

; 93   : 				*stack_ptr++ = addr;

	mov	rax, QWORD PTR ?stack_ptr@@3PEA_KEA	; stack_ptr
	mov	rcx, QWORD PTR addr$2[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR ?stack_ptr@@3PEA_KEA	; stack_ptr
	add	rax, 8
	mov	QWORD PTR ?stack_ptr@@3PEA_KEA, rax	; stack_ptr

; 94   : 				--numpage;

	mov	rax, QWORD PTR numpage$1[rsp]
	dec	rax
	mov	QWORD PTR numpage$1[rsp], rax

; 95   : 				addr += 4096;

	mov	rax, QWORD PTR addr$2[rsp]
	add	rax, 4096				; 00001000H
	mov	QWORD PTR addr$2[rsp], rax

; 96   : 			}

	jmp	SHORT $LN3@au_initial
$LN2@au_initial:

; 97   :             
; 98   : 			
; 99   : 			if (raw_diff(stack_ptr, page_stack) >= bufsize)

	mov	rdx, QWORD PTR ?page_stack@@3PEA_KEA	; page_stack
	mov	rcx, QWORD PTR ?stack_ptr@@3PEA_KEA	; stack_ptr
	call	??$raw_diff@_K_K@@YAHPEA_K0@Z		; raw_diff<unsigned __int64,unsigned __int64>
	cdqe
	cmp	rax, QWORD PTR bufsize$[rsp]
	jb	SHORT $LN1@au_initial

; 100  : 				break;

	jmp	SHORT $LN8@au_initial
$LN1@au_initial:
$LN7@au_initial:

; 101  : 		}
; 102  : 		current = raw_offset<EFI_MEMORY_DESCRIPTOR*>(current, memmap.DescriptorSize);

	mov	rax, QWORD PTR memmap$[rsp]
	mov	edx, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR current$[rsp]
	call	??$raw_offset@PEAUEFI_MEMORY_DESCRIPTOR@@PEAU1@@@YAPEAUEFI_MEMORY_DESCRIPTOR@@PEAU0@H@Z ; raw_offset<EFI_MEMORY_DESCRIPTOR * __ptr64,EFI_MEMORY_DESCRIPTOR * __ptr64>
	mov	QWORD PTR current$[rsp], rax

; 103  : 	}

	jmp	$LN9@au_initial
$LN8@au_initial:

; 104  : }

	add	rsp, 72					; 00000048H
	ret	0
?au_initialize_pmmngr@@YAXUEfiMemoryMap@@PEAX_K@Z ENDP	; au_initialize_pmmngr
_TEXT	ENDS
END
