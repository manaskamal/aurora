; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?thread_list_head@@3PEAU_thread_@@EA		; thread_list_head
PUBLIC	?thread_list_last@@3PEAU_thread_@@EA		; thread_list_last
PUBLIC	?idle@@3PEAU_thread_@@EA			; idle
_BSS	SEGMENT
scheduler_lock DD 01H DUP (?)
idle_lock DD	01H DUP (?)
?thread_list_head@@3PEAU_thread_@@EA DQ 01H DUP (?)	; thread_list_head
?thread_list_last@@3PEAU_thread_@@EA DQ 01H DUP (?)	; thread_list_last
?idle@@3PEAU_thread_@@EA DQ 01H DUP (?)			; idle
_BSS	ENDS
PUBLIC	thread_insert
PUBLIC	thread_delete
PUBLIC	x86_64_create_kthread
PUBLIC	?x86_64_initialize_scheduler@@YAHXZ		; x86_64_initialize_scheduler
PUBLIC	?x86_64_sched_start@@YAXXZ			; x86_64_sched_start
PUBLIC	?x86_64_initialize_idle@@YAXXZ			; x86_64_initialize_idle
PUBLIC	?x86_64_get_idle_thr@@YAPEAU_thread_@@XZ	; x86_64_get_idle_thr
PUBLIC	?x86_64_next_thread@@YAXXZ			; x86_64_next_thread
PUBLIC	?x86_64_sceduler_isr@@YAX_KPEAX@Z		; x86_64_sceduler_isr
PUBLIC	?x86_64_idle_thread@@YAXXZ			; x86_64_idle_thread
EXTRN	?per_cpu_set_c_thread@@YAXPEAX@Z:PROC		; per_cpu_set_c_thread
EXTRN	?per_cpu_get_c_thread@@YAPEAXXZ:PROC		; per_cpu_get_c_thread
EXTRN	setvect:PROC
EXTRN	?apic_local_eoi@@YAXXZ:PROC			; apic_local_eoi
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	x64_lock_acquire:PROC
EXTRN	x86_64_phys_to_virt:PROC
EXTRN	x86_64_pmmngr_alloc:PROC
EXTRN	?au_video_get_fb@@YAPEAIXZ:PROC			; au_video_get_fb
EXTRN	?au_video_get_x_res@@YAIXZ:PROC			; au_video_get_x_res
EXTRN	kmalloc:PROC
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	x86_64_save_context:PROC
EXTRN	x86_64_execute_context:PROC
pdata	SEGMENT
$pdata$x86_64_create_kthread DD imagerel $LN3
	DD	imagerel $LN3+460
	DD	imagerel $unwind$x86_64_create_kthread
$pdata$?x86_64_initialize_scheduler@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$?x86_64_initialize_scheduler@@YAHXZ
$pdata$?x86_64_sched_start@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?x86_64_sched_start@@YAXXZ
$pdata$?x86_64_initialize_idle@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$?x86_64_initialize_idle@@YAXXZ
$pdata$?x86_64_next_thread@@YAXXZ DD imagerel $LN7
	DD	imagerel $LN7+83
	DD	imagerel $unwind$?x86_64_next_thread@@YAXXZ
$pdata$?x86_64_sceduler_isr@@YAX_KPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+137
	DD	imagerel $unwind$?x86_64_sceduler_isr@@YAX_KPEAX@Z
$pdata$?x86_64_idle_thread@@YAXXZ DD imagerel $LN11
	DD	imagerel $LN11+122
	DD	imagerel $unwind$?x86_64_idle_thread@@YAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$x86_64_create_kthread DD 011301H
	DD	06213H
$unwind$?x86_64_initialize_scheduler@@YAHXZ DD 010401H
	DD	06204H
$unwind$?x86_64_sched_start@@YAXXZ DD 010401H
	DD	04204H
$unwind$?x86_64_initialize_idle@@YAXXZ DD 010401H
	DD	04204H
$unwind$?x86_64_next_thread@@YAXXZ DD 010401H
	DD	06204H
$unwind$?x86_64_sceduler_isr@@YAX_KPEAX@Z DD 010e01H
	DD	0620eH
$unwind$?x86_64_idle_thread@@YAXXZ DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
j$1 = 32
i$2 = 36
tv68 = 40
?x86_64_idle_thread@@YAXXZ PROC				; x86_64_idle_thread

; 180  : void x86_64_idle_thread() {

$LN11:
	sub	rsp, 56					; 00000038H

; 181  : 	//x64_lock_acquire(&idle_lock);
; 182  : 	//idle_lock = 0;
; 183  : 	for (int i = 0; i < 100; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN8@x86_64_idl
$LN7@x86_64_idl:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN8@x86_64_idl:
	cmp	DWORD PTR i$2[rsp], 100			; 00000064H
	jge	SHORT $LN6@x86_64_idl

; 184  : 		for (int j = 0; j < 100; j++) {

	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN5@x86_64_idl
$LN4@x86_64_idl:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN5@x86_64_idl:
	cmp	DWORD PTR j$1[rsp], 100			; 00000064H
	jge	SHORT $LN3@x86_64_idl

; 185  : 			au_video_get_fb()[i + j*au_video_get_x_res()] = 0xffffffff;

	call	?au_video_get_fb@@YAPEAIXZ		; au_video_get_fb
	mov	QWORD PTR tv68[rsp], rax
	call	?au_video_get_x_res@@YAIXZ		; au_video_get_x_res
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR i$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	mov	rcx, QWORD PTR tv68[rsp]
	mov	DWORD PTR [rcx+rax*4], -1		; ffffffffH

; 186  : 		}

	jmp	SHORT $LN4@x86_64_idl
$LN3@x86_64_idl:

; 187  : 			
; 188  : 	}

	jmp	SHORT $LN7@x86_64_idl
$LN6@x86_64_idl:
$LN2@x86_64_idl:

; 189  : 	while (1) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@x86_64_idl

; 190  : 	}

	jmp	SHORT $LN2@x86_64_idl
$LN1@x86_64_idl:

; 191  : }

	add	rsp, 56					; 00000038H
	ret	0
?x86_64_idle_thread@@YAXXZ ENDP				; x86_64_idle_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
current_thr$ = 32
v$ = 64
p$ = 72
?x86_64_sceduler_isr@@YAX_KPEAX@Z PROC			; x86_64_sceduler_isr

; 156  : void x86_64_sceduler_isr(size_t v, void* p) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 157  : 	x64_lock_acquire(&scheduler_lock);

	lea	rcx, OFFSET FLAT:scheduler_lock
	call	x64_lock_acquire

; 158  : 	x64_cli();

	call	x64_cli

; 159  : 	thread_t * current_thr = (thread_t*)per_cpu_get_c_thread();

	call	?per_cpu_get_c_thread@@YAPEAXXZ		; per_cpu_get_c_thread
	mov	QWORD PTR current_thr$[rsp], rax

; 160  : 	if (x86_64_save_context(current_thr) == 0) {

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	x86_64_save_context
	test	eax, eax
	jne	SHORT $LN1@x86_64_sce

; 161  : 		current_thr->cr3 = x64_read_cr3();

	call	x64_read_cr3
	mov	rcx, QWORD PTR current_thr$[rsp]
	mov	QWORD PTR [rcx+192], rax

; 162  : 		//printf("Scheduler Saved thread \n");
; 163  : 
; 164  : 		x86_64_next_thread();

	call	?x86_64_next_thread@@YAXXZ		; x86_64_next_thread

; 165  : 
; 166  : 		apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 167  : 		current_thr = (thread_t*)per_cpu_get_c_thread();

	call	?per_cpu_get_c_thread@@YAPEAXXZ		; per_cpu_get_c_thread
	mov	QWORD PTR current_thr$[rsp], rax

; 168  : 		//printf("Next thread choosen -> %x\n", current_thr);
; 169  : 		scheduler_lock = 0;

	mov	DWORD PTR scheduler_lock, 0

; 170  : 		x86_64_execute_context(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	x86_64_execute_context
$LN1@x86_64_sce:

; 171  : 	}
; 172  : 
; 173  : 	apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 174  : 	//printf("Scheduler isr -> %d \n", per_cpu_get_cpu_id());
; 175  : 	scheduler_lock = 0;

	mov	DWORD PTR scheduler_lock, 0

; 176  : 	x64_sti();

	call	x64_sti

; 177  : }

	add	rsp, 56					; 00000038H
	ret	0
?x86_64_sceduler_isr@@YAX_KPEAX@Z ENDP			; x86_64_sceduler_isr
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
thr$ = 32
?x86_64_next_thread@@YAXXZ PROC				; x86_64_next_thread

; 139  : void x86_64_next_thread() {

$LN7:
	sub	rsp, 56					; 00000038H

; 140  : 	thread_t *thr = (thread_t*)per_cpu_get_c_thread();

	call	?per_cpu_get_c_thread@@YAPEAXXZ		; per_cpu_get_c_thread
	mov	QWORD PTR thr$[rsp], rax
$LN4@x86_64_nex:

; 141  : 	do {
; 142  : 		thr = thr->next;

	mov	rax, QWORD PTR thr$[rsp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR thr$[rsp], rax

; 143  : 		if (thr == NULL)

	cmp	QWORD PTR thr$[rsp], 0
	jne	SHORT $LN1@x86_64_nex

; 144  : 			thr = thread_list_head;

	mov	rax, QWORD PTR ?thread_list_head@@3PEAU_thread_@@EA ; thread_list_head
	mov	QWORD PTR thr$[rsp], rax
$LN1@x86_64_nex:

; 145  : 	} while (thr->state != THREAD_STATE_READY);

	mov	rax, QWORD PTR thr$[rsp]
	movzx	eax, BYTE PTR [rax+208]
	cmp	eax, 1
	jne	SHORT $LN4@x86_64_nex
$end$8:

; 146  : 
; 147  : end:
; 148  : 	per_cpu_set_c_thread(thr);

	mov	rcx, QWORD PTR thr$[rsp]
	call	?per_cpu_set_c_thread@@YAXPEAX@Z	; per_cpu_set_c_thread

; 149  : }

	add	rsp, 56					; 00000038H
	ret	0
?x86_64_next_thread@@YAXXZ ENDP				; x86_64_next_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
?x86_64_get_idle_thr@@YAPEAU_thread_@@XZ PROC		; x86_64_get_idle_thr

; 223  : 	return idle;

	mov	rax, QWORD PTR ?idle@@3PEAU_thread_@@EA	; idle

; 224  : }

	ret	0
?x86_64_get_idle_thr@@YAPEAU_thread_@@XZ ENDP		; x86_64_get_idle_thr
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
?x86_64_initialize_idle@@YAXXZ PROC			; x86_64_initialize_idle

; 209  : void x86_64_initialize_idle() {

$LN3:
	sub	rsp, 40					; 00000028H

; 210  : 	per_cpu_set_c_thread((void*)idle);

	mov	rcx, QWORD PTR ?idle@@3PEAU_thread_@@EA	; idle
	call	?per_cpu_set_c_thread@@YAXPEAX@Z	; per_cpu_set_c_thread

; 211  : }

	add	rsp, 40					; 00000028H
	ret	0
?x86_64_initialize_idle@@YAXXZ ENDP			; x86_64_initialize_idle
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
?x86_64_sched_start@@YAXXZ PROC				; x86_64_sched_start

; 216  : void x86_64_sched_start() {

$LN3:
	sub	rsp, 40					; 00000028H

; 217  : 	x64_cli();

	call	x64_cli

; 218  : 	setvect(0x40, x86_64_sceduler_isr);

	lea	rdx, OFFSET FLAT:?x86_64_sceduler_isr@@YAX_KPEAX@Z ; x86_64_sceduler_isr
	mov	ecx, 64					; 00000040H
	call	setvect

; 219  : 	x86_64_execute_context(idle);

	mov	rcx, QWORD PTR ?idle@@3PEAU_thread_@@EA	; idle
	call	x86_64_execute_context

; 220  : }

	add	rsp, 40					; 00000028H
	ret	0
?x86_64_sched_start@@YAXXZ ENDP				; x86_64_sched_start
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
tv66 = 32
?x86_64_initialize_scheduler@@YAHXZ PROC		; x86_64_initialize_scheduler

; 197  : int x86_64_initialize_scheduler() {

$LN3:
	sub	rsp, 56					; 00000038H

; 198  : 	x64_lock_acquire(&scheduler_lock);

	lea	rcx, OFFSET FLAT:scheduler_lock
	call	x64_lock_acquire

; 199  : 	idle = x86_64_create_kthread(x86_64_idle_thread, (uint64_t)x86_64_phys_to_virt((size_t)x86_64_pmmngr_alloc()),
; 200  : 		x64_read_cr3());

	call	x64_read_cr3
	mov	QWORD PTR tv66[rsp], rax
	call	x86_64_pmmngr_alloc
	mov	rcx, rax
	call	x86_64_phys_to_virt
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?x86_64_idle_thread@@YAXXZ ; x86_64_idle_thread
	call	x86_64_create_kthread
	mov	QWORD PTR ?idle@@3PEAU_thread_@@EA, rax	; idle

; 201  : 	per_cpu_set_c_thread((void*)idle);

	mov	rcx, QWORD PTR ?idle@@3PEAU_thread_@@EA	; idle
	call	?per_cpu_set_c_thread@@YAXPEAX@Z	; per_cpu_set_c_thread

; 202  : 	scheduler_lock = 0;

	mov	DWORD PTR scheduler_lock, 0

; 203  : 	return 0;

	xor	eax, eax

; 204  : }

	add	rsp, 56					; 00000038H
	ret	0
?x86_64_initialize_scheduler@@YAHXZ ENDP		; x86_64_initialize_scheduler
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
thread$ = 32
entry$ = 64
stack$ = 72
cr3$ = 80
x86_64_create_kthread PROC

; 101  : thread_t * x86_64_create_kthread(void(*entry)(void), uint64_t stack, uint64_t cr3) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 102  : 	thread_t *thread = (thread_t*)kmalloc(sizeof(thread_t));

	mov	ecx, 232				; 000000e8H
	call	kmalloc
	mov	QWORD PTR thread$[rsp], rax

; 103  : 	memset(thread, 0, sizeof(thread_t));

	mov	r8d, 232				; 000000e8H
	xor	edx, edx
	mov	rcx, QWORD PTR thread$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 104  : 	thread->ss = 0x10;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax], 16

; 105  : 	thread->rsp = (uint64_t*)stack;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 106  : 	thread->rflags = 0x202;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+16], 514			; 00000202H

; 107  : 	thread->cs = 0x08;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+24], 8

; 108  : 	thread->rip = (uint64_t)entry;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 109  : 	thread->rax = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+40], 0

; 110  : 	thread->rbx = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+48], 0

; 111  : 	thread->rcx = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+56], 0

; 112  : 	thread->rdx = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+64], 0

; 113  : 	thread->rsi = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+72], 0

; 114  : 	thread->rdi = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+80], 0

; 115  : 	thread->rbp = (uint64_t)thread->rsp;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+88], rcx

; 116  : 	thread->r8 = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+96], 0

; 117  : 	thread->r9 = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+104], 0

; 118  : 	thread->r10 = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+112], 0

; 119  : 	thread->r11 = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+120], 0

; 120  : 	thread->r12 = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+128], 0

; 121  : 	thread->r13 = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+136], 0

; 122  : 	thread->r14 = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+144], 0

; 123  : 	thread->r15 = 0;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+152], 0

; 124  : 	thread->ds = 0x10;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+160], 16

; 125  : 	thread->es = 0x10;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+168], 16

; 126  : 	thread->fs = 0x10;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+176], 16

; 127  : 	thread->gs = 0x10;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR [rax+184], 16

; 128  : 	thread->cr3 = cr3;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+192], rcx

; 129  : 	thread->kern_esp = stack;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+200], rcx

; 130  : 	thread->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR thread$[rsp]
	mov	BYTE PTR [rax+208], 1

; 131  : 	thread_insert(thread);

	mov	rcx, QWORD PTR thread$[rsp]
	call	thread_insert

; 132  : 	return thread;

	mov	rax, QWORD PTR thread$[rsp]

; 133  : }

	add	rsp, 56					; 00000038H
	ret	0
x86_64_create_kthread ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
thread$ = 8
thread_delete PROC

; 76   : void thread_delete(thread_t * thread) {

	mov	QWORD PTR [rsp+8], rcx

; 77   : 	if (thread_list_head == NULL)

	cmp	QWORD PTR ?thread_list_head@@3PEAU_thread_@@EA, 0 ; thread_list_head
	jne	SHORT $LN5@thread_del

; 78   : 		return;

	jmp	$LN6@thread_del
$LN5@thread_del:

; 79   : 
; 80   : 	if (thread == thread_list_head) {

	mov	rax, QWORD PTR ?thread_list_head@@3PEAU_thread_@@EA ; thread_list_head
	cmp	QWORD PTR thread$[rsp], rax
	jne	SHORT $LN4@thread_del

; 81   : 		thread_list_head = thread_list_head->next;

	mov	rax, QWORD PTR ?thread_list_head@@3PEAU_thread_@@EA ; thread_list_head
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR ?thread_list_head@@3PEAU_thread_@@EA, rax ; thread_list_head

; 82   : 	}
; 83   : 	else {

	jmp	SHORT $LN3@thread_del
$LN4@thread_del:

; 84   : 		thread->prev->next = thread->next;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+224]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+216]
	mov	QWORD PTR [rax+216], rcx
$LN3@thread_del:

; 85   : 	}
; 86   : 
; 87   : 	if (thread == thread_list_last) {

	mov	rax, QWORD PTR ?thread_list_last@@3PEAU_thread_@@EA ; thread_list_last
	cmp	QWORD PTR thread$[rsp], rax
	jne	SHORT $LN2@thread_del

; 88   : 		thread_list_last = thread->prev;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+224]
	mov	QWORD PTR ?thread_list_last@@3PEAU_thread_@@EA, rax ; thread_list_last

; 89   : 	}
; 90   : 	else {

	jmp	SHORT $LN1@thread_del
$LN2@thread_del:

; 91   : 		thread->next->prev = thread->prev;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+216]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+224]
	mov	QWORD PTR [rax+224], rcx
$LN1@thread_del:
$LN6@thread_del:

; 92   : 	}
; 93   : }

	ret	0
thread_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_scheduler.cpp
_TEXT	SEGMENT
new_thread$ = 8
thread_insert PROC

; 55   : void thread_insert(thread_t * new_thread) {

	mov	QWORD PTR [rsp+8], rcx

; 56   : 	new_thread->next = NULL;

	mov	rax, QWORD PTR new_thread$[rsp]
	mov	QWORD PTR [rax+216], 0

; 57   : 	new_thread->prev = NULL;

	mov	rax, QWORD PTR new_thread$[rsp]
	mov	QWORD PTR [rax+224], 0

; 58   : 
; 59   : 	if (thread_list_head == NULL) {

	cmp	QWORD PTR ?thread_list_head@@3PEAU_thread_@@EA, 0 ; thread_list_head
	jne	SHORT $LN2@thread_ins

; 60   : 		thread_list_last = new_thread;

	mov	rax, QWORD PTR new_thread$[rsp]
	mov	QWORD PTR ?thread_list_last@@3PEAU_thread_@@EA, rax ; thread_list_last

; 61   : 		thread_list_head = new_thread;

	mov	rax, QWORD PTR new_thread$[rsp]
	mov	QWORD PTR ?thread_list_head@@3PEAU_thread_@@EA, rax ; thread_list_head

; 62   : 	}
; 63   : 	else {

	jmp	SHORT $LN1@thread_ins
$LN2@thread_ins:

; 64   : 		thread_list_last->next = new_thread;

	mov	rax, QWORD PTR ?thread_list_last@@3PEAU_thread_@@EA ; thread_list_last
	mov	rcx, QWORD PTR new_thread$[rsp]
	mov	QWORD PTR [rax+216], rcx

; 65   : 		new_thread->prev = thread_list_last;

	mov	rax, QWORD PTR new_thread$[rsp]
	mov	rcx, QWORD PTR ?thread_list_last@@3PEAU_thread_@@EA ; thread_list_last
	mov	QWORD PTR [rax+224], rcx
$LN1@thread_ins:

; 66   : 	}
; 67   : 
; 68   : 	thread_list_last = new_thread;

	mov	rax, QWORD PTR new_thread$[rsp]
	mov	QWORD PTR ?thread_list_last@@3PEAU_thread_@@EA, rax ; thread_list_last

; 69   : }

	ret	0
thread_insert ENDP
_TEXT	ENDS
END
