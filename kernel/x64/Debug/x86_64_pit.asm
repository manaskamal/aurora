; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
pit_lock DQ	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
pit_count DQ	0000000000000001H
_DATA	ENDS
PUBLIC	?x86_64_pit_initialize@@YAXXZ			; x86_64_pit_initialize
PUBLIC	?x86_64_pit_get_current@@YA_KXZ			; x86_64_pit_get_current
PUBLIC	?x86_64_pit_sleep@@YAXH@Z			; x86_64_pit_sleep
PUBLIC	?x86_64_pit_handler@@YAX_KPEAX@Z		; x86_64_pit_handler
EXTRN	x64_outportb:PROC
EXTRN	?apic_local_eoi@@YAXXZ:PROC			; apic_local_eoi
EXTRN	ioapic_register_irq:PROC
;	COMDAT ?ticks@?1??x86_64_pit_sleep@@YAXH@Z@4HA
_BSS	SEGMENT
?ticks@?1??x86_64_pit_sleep@@YAXH@Z@4HA DD 01H DUP (?)	; `x86_64_pit_sleep'::`2'::ticks
_BSS	ENDS
;	COMDAT ?$S1@?1??x86_64_pit_sleep@@YAXH@Z@4IA
_BSS	SEGMENT
?$S1@?1??x86_64_pit_sleep@@YAXH@Z@4IA DD 01H DUP (?)	; `x86_64_pit_sleep'::`2'::$S1
_BSS	ENDS
pdata	SEGMENT
$pdata$?x86_64_pit_initialize@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?x86_64_pit_initialize@@YAXXZ
$pdata$?x86_64_pit_handler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?x86_64_pit_handler@@YAX_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?x86_64_pit_initialize@@YAXXZ DD 010401H
	DD	06204H
$unwind$?x86_64_pit_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_pit.cpp
_TEXT	SEGMENT
v$ = 48
p$ = 56
?x86_64_pit_handler@@YAX_KPEAX@Z PROC			; x86_64_pit_handler

; 42   : void x86_64_pit_handler(size_t v, void* p) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 43   : 	//x64_lock_acquire(&pit_lock);
; 44   : 	pit_count++;

	mov	rax, QWORD PTR pit_count
	inc	rax
	mov	QWORD PTR pit_count, rax

; 45   : 	apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 46   : 	//pit_lock = 0;
; 47   : }

	add	rsp, 40					; 00000028H
	ret	0
?x86_64_pit_handler@@YAX_KPEAX@Z ENDP			; x86_64_pit_handler
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_pit.cpp
_TEXT	SEGMENT
ms$ = 8
?x86_64_pit_sleep@@YAXH@Z PROC				; x86_64_pit_sleep

; 62   : void x86_64_pit_sleep(int ms) {

	mov	DWORD PTR [rsp+8], ecx

; 63   : 	static int ticks = ms + pit_count;

	mov	eax, DWORD PTR ?$S1@?1??x86_64_pit_sleep@@YAXH@Z@4IA
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN3@x86_64_pit
	mov	eax, DWORD PTR ?$S1@?1??x86_64_pit_sleep@@YAXH@Z@4IA
	or	eax, 1
	mov	DWORD PTR ?$S1@?1??x86_64_pit_sleep@@YAXH@Z@4IA, eax
	movsxd	rax, DWORD PTR ms$[rsp]
	add	rax, QWORD PTR pit_count
	mov	DWORD PTR ?ticks@?1??x86_64_pit_sleep@@YAXH@Z@4HA, eax
$LN3@x86_64_pit:
$LN2@x86_64_pit:

; 64   : 	while (ticks > pit_count)

	movsxd	rax, DWORD PTR ?ticks@?1??x86_64_pit_sleep@@YAXH@Z@4HA
	cmp	rax, QWORD PTR pit_count
	jbe	SHORT $LN1@x86_64_pit

; 65   : 		;

	jmp	SHORT $LN2@x86_64_pit
$LN1@x86_64_pit:

; 66   : }

	ret	0
?x86_64_pit_sleep@@YAXH@Z ENDP				; x86_64_pit_sleep
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_pit.cpp
_TEXT	SEGMENT
?x86_64_pit_get_current@@YA_KXZ PROC			; x86_64_pit_get_current

; 59   : 	return pit_count;

	mov	rax, QWORD PTR pit_count

; 60   : }

	ret	0
?x86_64_pit_get_current@@YA_KXZ ENDP			; x86_64_pit_get_current
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_pit.cpp
_TEXT	SEGMENT
divider$ = 32
?x86_64_pit_initialize@@YAXXZ PROC			; x86_64_pit_initialize

; 50   : void x86_64_pit_initialize() {

$LN3:
	sub	rsp, 56					; 00000038H

; 51   : 	uint32_t divider = 1193181 / 100;

	mov	DWORD PTR divider$[rsp], 11931		; 00002e9bH

; 52   : 	x64_outportb(0x43, 0x00 | 0x06 | 0x30 | 0x00);

	mov	dl, 54					; 00000036H
	mov	cx, 67					; 00000043H
	call	x64_outportb

; 53   : 	x64_outportb(0x40, divider & 0xff);

	mov	eax, DWORD PTR divider$[rsp]
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	cx, 64					; 00000040H
	call	x64_outportb

; 54   : 	x64_outportb(0x40, (divider >> 8));

	mov	eax, DWORD PTR divider$[rsp]
	shr	eax, 8
	movzx	edx, al
	mov	cx, 64					; 00000040H
	call	x64_outportb

; 55   : 	ioapic_register_irq(0, x86_64_pit_handler, 2);

	mov	r8b, 2
	lea	rdx, OFFSET FLAT:?x86_64_pit_handler@@YAX_KPEAX@Z ; x86_64_pit_handler
	xor	ecx, ecx
	call	ioapic_register_irq

; 56   : }

	add	rsp, 56					; 00000038H
	ret	0
?x86_64_pit_initialize@@YAXXZ ENDP			; x86_64_pit_initialize
_TEXT	ENDS
END
