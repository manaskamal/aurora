; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?first_block@@3PEAU_meta_data_@@EA		; first_block
PUBLIC	?last_block@@3PEAU_meta_data_@@EA		; last_block
_BSS	SEGMENT
?first_block@@3PEAU_meta_data_@@EA DQ 01H DUP (?)	; first_block
?last_block@@3PEAU_meta_data_@@EA DQ 01H DUP (?)	; last_block
_BSS	ENDS
PUBLIC	?x86_64_kmalloc_initialize@@YAHXZ		; x86_64_kmalloc_initialize
PUBLIC	?au_request_page@@YAPEA_KH@Z			; au_request_page
PUBLIC	?au_free_page@@YAXPEAXH@Z			; au_free_page
PUBLIC	kmalloc
PUBLIC	kfree
PUBLIC	krealloc
PUBLIC	kcalloc
PUBLIC	?au_split_block@@YAXPEAU_meta_data_@@_K@Z	; au_split_block
PUBLIC	?au_expand_kmalloc@@YAX_K@Z			; au_expand_kmalloc
EXTRN	x86_64_map_page:PROC
EXTRN	x86_64_get_free_page:PROC
EXTRN	x86_64_paging_free:PROC
EXTRN	x86_64_pmmngr_alloc:PROC
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	memcpy:PROC
pdata	SEGMENT
$pdata$?x86_64_kmalloc_initialize@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?x86_64_kmalloc_initialize@@YAHXZ
$pdata$?au_request_page@@YAPEA_KH@Z DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$?au_request_page@@YAPEA_KH@Z
$pdata$?au_free_page@@YAXPEAXH@Z DD imagerel $LN6
	DD	imagerel $LN6+79
	DD	imagerel $unwind$?au_free_page@@YAXPEAXH@Z
$pdata$kmalloc DD imagerel $LN9
	DD	imagerel $LN9+197
	DD	imagerel $unwind$kmalloc
$pdata$kfree DD	imagerel $LN6
	DD	imagerel $LN6+229
	DD	imagerel $unwind$kfree
$pdata$krealloc DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$krealloc
$pdata$kcalloc DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$kcalloc
$pdata$?au_split_block@@YAXPEAU_meta_data_@@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+207
	DD	imagerel $unwind$?au_split_block@@YAXPEAU_meta_data_@@_K@Z
$pdata$?au_expand_kmalloc@@YAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+312
	DD	imagerel $unwind$?au_expand_kmalloc@@YAX_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?x86_64_kmalloc_initialize@@YAHXZ DD 010401H
	DD	08204H
$unwind$?au_request_page@@YAPEA_KH@Z DD 010801H
	DD	08208H
$unwind$?au_free_page@@YAXPEAXH@Z DD 010d01H
	DD	0620dH
$unwind$kmalloc DD 010901H
	DD	06209H
$unwind$kfree DD 010901H
	DD	02209H
$unwind$krealloc DD 010e01H
	DD	0620eH
$unwind$kcalloc DD 010e01H
	DD	0620eH
$unwind$?au_split_block@@YAXPEAU_meta_data_@@_K@Z DD 010e01H
	DD	0220eH
$unwind$?au_expand_kmalloc@@YAX_K@Z DD 010901H
	DD	08209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
meta$ = 32
req_pages$ = 40
desc_addr$ = 48
page$ = 56
req_size$ = 80
?au_expand_kmalloc@@YAX_K@Z PROC			; au_expand_kmalloc

; 81   : void au_expand_kmalloc(size_t req_size) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 82   : 	size_t req_pages = 1;

	mov	QWORD PTR req_pages$[rsp], 1

; 83   : 	if (req_size >= 4096)

	cmp	QWORD PTR req_size$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@au_expand_

; 84   : 		req_pages = (req_size + sizeof(meta_data_t)) / 4096 + 1;

	mov	rax, QWORD PTR req_size$[rsp]
	add	rax, 48					; 00000030H
	xor	edx, edx
	mov	ecx, 4096				; 00001000H
	div	rcx
	inc	rax
	mov	QWORD PTR req_pages$[rsp], rax
$LN2@au_expand_:

; 85   : 
; 86   : 	void* page = au_request_page(req_pages);

	mov	ecx, DWORD PTR req_pages$[rsp]
	call	?au_request_page@@YAPEA_KH@Z		; au_request_page
	mov	QWORD PTR page$[rsp], rax

; 87   : 	uint8_t* desc_addr = (uint8_t*)page;

	mov	rax, QWORD PTR page$[rsp]
	mov	QWORD PTR desc_addr$[rsp], rax

; 88   : 	/* setup the first meta data block */
; 89   : 	meta_data_t *meta = (meta_data_t*)desc_addr;

	mov	rax, QWORD PTR desc_addr$[rsp]
	mov	QWORD PTR meta$[rsp], rax

; 90   : 	meta->free = true;

	mov	rax, QWORD PTR meta$[rsp]
	mov	BYTE PTR [rax+16], 1

; 91   : 	meta->next = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+32], 0

; 92   : 	meta->prev = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+40], 0

; 93   : 	meta->magic = MAGIC_FREE;

	mov	rax, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rax], 369500162		; 16062002H

; 94   : 	meta->eob_mark = (desc_addr + 4095);

	mov	rax, QWORD PTR desc_addr$[rsp]
	add	rax, 4095				; 00000fffH
	mov	rcx, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 95   : 
; 96   : 	/* meta->size holds only the usable area size for user */
; 97   : 	meta->size = req_pages * 4096 - sizeof(meta_data_t);

	imul	rax, QWORD PTR req_pages$[rsp], 4096	; 00001000H
	sub	rax, 48					; 00000030H
	mov	rcx, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 98   : 	last_block->next = meta;

	mov	rax, QWORD PTR ?last_block@@3PEAU_meta_data_@@EA ; last_block
	mov	rcx, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 99   : 	meta->prev = last_block;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR ?last_block@@3PEAU_meta_data_@@EA ; last_block
	mov	QWORD PTR [rax+40], rcx

; 100  : 	last_block = meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR ?last_block@@3PEAU_meta_data_@@EA, rax ; last_block

; 101  : 
; 102  : 
; 103  : 	/* now check if we can merge the last block and this
; 104  : 	* into one
; 105  : 	*/
; 106  : 	if (meta->prev->free) {

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+40]
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	je	SHORT $LN1@au_expand_

; 107  : 		meta->prev->size += meta->size;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR meta$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rcx+8], rax

; 108  : 		meta->prev->next = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR [rax+32], 0

; 109  : 		last_block = meta->prev;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR ?last_block@@3PEAU_meta_data_@@EA, rax ; last_block
$LN1@au_expand_:

; 110  : 	}
; 111  : 	
; 112  : }

	add	rsp, 72					; 00000048H
	ret	0
?au_expand_kmalloc@@YAX_K@Z ENDP			; au_expand_kmalloc
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
new_block$ = 0
meta_block_a$ = 8
meta_block$ = 32
req_size$ = 40
?au_split_block@@YAXPEAU_meta_data_@@_K@Z PROC		; au_split_block

; 64   : void au_split_block(meta_data_t* meta_block, size_t req_size) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 65   : 	uint8_t* meta_block_a = (uint8_t*)meta_block;	

	mov	rax, QWORD PTR meta_block$[rsp]
	mov	QWORD PTR meta_block_a$[rsp], rax

; 66   : 	meta_data_t* new_block = (meta_data_t*)(meta_block_a + sizeof(meta_data_t) + req_size);

	mov	rax, QWORD PTR meta_block_a$[rsp]
	mov	rcx, QWORD PTR req_size$[rsp]
	lea	rax, QWORD PTR [rax+rcx+48]
	mov	QWORD PTR new_block$[rsp], rax

; 67   : 	new_block->free = true;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	BYTE PTR [rax+16], 1

; 68   : 	new_block->eob_mark = meta_block->eob_mark;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	rcx, QWORD PTR meta_block$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 69   : 	new_block->magic = MAGIC_FREE;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	DWORD PTR [rax], 369500162		; 16062002H

; 70   : 	new_block->prev = meta_block;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	rcx, QWORD PTR meta_block$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 71   : 	new_block->next = meta_block->next;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	rcx, QWORD PTR meta_block$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+32], rcx

; 72   : 	new_block->size = meta_block->size - req_size - sizeof(meta_data_t);

	mov	rax, QWORD PTR meta_block$[rsp]
	mov	rcx, QWORD PTR req_size$[rsp]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, rcx
	sub	rax, 48					; 00000030H
	mov	rcx, QWORD PTR new_block$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 73   : 	if (new_block->size < 0)

	mov	rax, QWORD PTR new_block$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jae	SHORT $LN1@au_split_b

; 74   : 		new_block->size = 0;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	QWORD PTR [rax+8], 0
$LN1@au_split_b:

; 75   : 	meta_block->size = req_size + sizeof(meta_data_t);

	mov	rax, QWORD PTR req_size$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, QWORD PTR meta_block$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 76   : 	meta_block->next = new_block;

	mov	rax, QWORD PTR meta_block$[rsp]
	mov	rcx, QWORD PTR new_block$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 77   : 	last_block = new_block;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	QWORD PTR ?last_block@@3PEAU_meta_data_@@EA, rax ; last_block

; 78   : }

	add	rsp, 24
	ret	0
?au_split_block@@YAXPEAU_meta_data_@@_K@Z ENDP		; au_split_block
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
ptr$ = 32
total$ = 40
n_item$ = 64
size$ = 72
kcalloc	PROC

; 192  : void* kcalloc(size_t n_item, size_t size) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 193  : 	size_t total = n_item * size;

	mov	rax, QWORD PTR n_item$[rsp]
	imul	rax, QWORD PTR size$[rsp]
	mov	QWORD PTR total$[rsp], rax

; 194  : 
; 195  : 	void* ptr = kmalloc(total);

	mov	rcx, QWORD PTR total$[rsp]
	call	kmalloc
	mov	QWORD PTR ptr$[rsp], rax

; 196  : 	if (ptr)

	cmp	QWORD PTR ptr$[rsp], 0
	je	SHORT $LN1@kcalloc

; 197  : 		memset(ptr, 0, total);

	mov	r8d, DWORD PTR total$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR ptr$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset
$LN1@kcalloc:

; 198  : 	return ptr;

	mov	rax, QWORD PTR ptr$[rsp]

; 199  : }

	add	rsp, 56					; 00000038H
	ret	0
kcalloc	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
result$ = 32
ptr$ = 64
new_size$ = 72
krealloc PROC

; 174  : void* krealloc(void* ptr, size_t new_size) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 175  : 	void* result = kmalloc(new_size);

	mov	rcx, QWORD PTR new_size$[rsp]
	call	kmalloc
	mov	QWORD PTR result$[rsp], rax

; 176  : 	if (ptr) {

	cmp	QWORD PTR ptr$[rsp], 0
	je	SHORT $LN1@krealloc

; 177  : 		/* here we can check the size difference
; 178  : 		 * of new_size and old size from internal
; 179  : 		 * data structure of kmalloc */
; 180  : 		memcpy(result, ptr, new_size);

	mov	r8d, DWORD PTR new_size$[rsp]
	mov	rdx, QWORD PTR ptr$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	memcpy
$LN1@krealloc:

; 181  : 	}
; 182  : 
; 183  : 	kfree(ptr);

	mov	rcx, QWORD PTR ptr$[rsp]
	call	kfree

; 184  : 	return result;

	mov	rax, QWORD PTR result$[rsp]

; 185  : }

	add	rsp, 56					; 00000038H
	ret	0
krealloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
meta$ = 0
actual_addr$ = 8
ptr$ = 32
kfree	PROC

; 147  : void kfree(void* ptr) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 148  : 	uint8_t* actual_addr = (uint8_t*)ptr - sizeof(meta_data_t);

	mov	rax, QWORD PTR ptr$[rsp]
	sub	rax, 48					; 00000030H
	mov	QWORD PTR actual_addr$[rsp], rax

; 149  : 	meta_data_t *meta = (meta_data_t*)actual_addr;

	mov	rax, QWORD PTR actual_addr$[rsp]
	mov	QWORD PTR meta$[rsp], rax

; 150  : 	meta->free = true;

	mov	rax, QWORD PTR meta$[rsp]
	mov	BYTE PTR [rax+16], 1

; 151  : 
; 152  : 	/* merge it with 3 near blocks if they are free*/
; 153  : 
; 154  : 	if (meta->next && meta->next->free) {

	mov	rax, QWORD PTR meta$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN3@kfree
	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+32]
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	je	SHORT $LN3@kfree

; 155  : 		meta->size += meta->next->size;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, QWORD PTR [rax+8]
	mov	rax, rcx
	mov	rcx, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN3@kfree:

; 156  : 	}
; 157  : 
; 158  : 	if (meta->prev && meta->prev->free) {

	mov	rax, QWORD PTR meta$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN2@kfree
	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+40]
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	je	SHORT $LN2@kfree

; 159  : 		meta->prev->size += meta->size;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR meta$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rcx+8], rax

; 160  : 		meta->prev->next = meta->next;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+32], rcx
$LN2@kfree:

; 161  : 	}
; 162  : 
; 163  : 	if (meta->next && meta->next->free) {

	mov	rax, QWORD PTR meta$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN1@kfree
	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+32]
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	je	SHORT $LN1@kfree

; 164  : 		meta->next->prev = meta->prev;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+40], rcx
$LN1@kfree:

; 165  : 	}
; 166  : 
; 167  : }

	add	rsp, 24
	ret	0
kfree	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
meta$1 = 32
size$ = 64
kmalloc	PROC

; 117  : void* kmalloc(size_t size) {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 118  : 	
; 119  : 	/* now search begins */
; 120  : 	for (meta_data_t *meta = first_block; meta != NULL; meta = meta->next) {

	mov	rax, QWORD PTR ?first_block@@3PEAU_meta_data_@@EA ; first_block
	mov	QWORD PTR meta$1[rsp], rax
	jmp	SHORT $LN6@kmalloc
$LN5@kmalloc:
	mov	rax, QWORD PTR meta$1[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR meta$1[rsp], rax
$LN6@kmalloc:
	cmp	QWORD PTR meta$1[rsp], 0
	je	SHORT $LN4@kmalloc

; 121  : 		if (meta->free) {

	mov	rax, QWORD PTR meta$1[rsp]
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	je	SHORT $LN3@kmalloc

; 122  : 
; 123  : 			if (meta->size > size) {

	mov	rax, QWORD PTR meta$1[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	cmp	QWORD PTR [rax+8], rcx
	jbe	SHORT $LN2@kmalloc

; 124  : 				au_split_block(meta, size);

	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR meta$1[rsp]
	call	?au_split_block@@YAXPEAU_meta_data_@@_K@Z ; au_split_block

; 125  : 				meta->free = false;

	mov	rax, QWORD PTR meta$1[rsp]
	mov	BYTE PTR [rax+16], 0

; 126  : 				meta->magic = MAGIC_USED;

	mov	rax, QWORD PTR meta$1[rsp]
	mov	DWORD PTR [rax], 303112194		; 12112002H

; 127  : 				return ((uint8_t*)meta + sizeof(meta_data_t));

	mov	rax, QWORD PTR meta$1[rsp]
	add	rax, 48					; 00000030H
	jmp	SHORT $LN7@kmalloc
$LN2@kmalloc:

; 128  : 			}
; 129  : 
; 130  : 			if (meta->size == size) {

	mov	rax, QWORD PTR meta$1[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN1@kmalloc

; 131  : 				meta->free = false;

	mov	rax, QWORD PTR meta$1[rsp]
	mov	BYTE PTR [rax+16], 0

; 132  : 				meta->magic = MAGIC_USED;

	mov	rax, QWORD PTR meta$1[rsp]
	mov	DWORD PTR [rax], 303112194		; 12112002H

; 133  : 				return ((uint8_t*)meta + sizeof(meta_data_t));

	mov	rax, QWORD PTR meta$1[rsp]
	add	rax, 48					; 00000030H
	jmp	SHORT $LN7@kmalloc
$LN1@kmalloc:
$LN3@kmalloc:

; 134  : 			}
; 135  : 		}
; 136  : 	}

	jmp	$LN5@kmalloc
$LN4@kmalloc:

; 137  : 
; 138  : 	au_expand_kmalloc(size);

	mov	rcx, QWORD PTR size$[rsp]
	call	?au_expand_kmalloc@@YAX_K@Z		; au_expand_kmalloc

; 139  : 	return kmalloc(size);

	mov	rcx, QWORD PTR size$[rsp]
	call	kmalloc
$LN7@kmalloc:

; 140  : }

	add	rsp, 56					; 00000038H
	ret	0
kmalloc	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
i$1 = 32
ptr$ = 64
pages$ = 72
?au_free_page@@YAXPEAXH@Z PROC				; au_free_page

; 218  : void au_free_page(void* ptr, int pages) {

$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 219  : 	for (int i = 0; i < pages; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@au_free_pa
$LN2@au_free_pa:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@au_free_pa:
	mov	eax, DWORD PTR pages$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN1@au_free_pa

; 220  : 		x86_64_paging_free((uint64_t)ptr + i * 4096);

	imul	eax, DWORD PTR i$1[rsp], 4096		; 00001000H
	cdqe
	mov	rcx, QWORD PTR ptr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	x86_64_paging_free
	jmp	SHORT $LN2@au_free_pa
$LN1@au_free_pa:

; 221  : }

	add	rsp, 56					; 00000038H
	ret	0
?au_free_page@@YAXPEAXH@Z ENDP				; au_free_page
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
i$1 = 32
page$ = 40
tv73 = 48
pages$ = 80
?au_request_page@@YAPEA_KH@Z PROC			; au_request_page

; 204  : uint64_t* au_request_page(int pages) {

$LN6:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 205  : 	uint64_t* page = x86_64_get_free_page(false);

	xor	ecx, ecx
	call	x86_64_get_free_page
	mov	QWORD PTR page$[rsp], rax

; 206  : 	for (int i = 0; i <= pages; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@au_request
$LN2@au_request:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@au_request:
	mov	eax, DWORD PTR pages$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN1@au_request

; 207  : 		x86_64_map_page((uint64_t)x86_64_pmmngr_alloc(), (uint64_t)(page + i * 4096), 0);

	imul	eax, DWORD PTR i$1[rsp], 4096		; 00001000H
	cdqe
	mov	rcx, QWORD PTR page$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv73[rsp], rax
	call	x86_64_pmmngr_alloc
	xor	r8d, r8d
	mov	rcx, QWORD PTR tv73[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	x86_64_map_page
	jmp	SHORT $LN2@au_request
$LN1@au_request:

; 208  : 
; 209  : 	return page;

	mov	rax, QWORD PTR page$[rsp]

; 210  : }

	add	rsp, 72					; 00000048H
	ret	0
?au_request_page@@YAPEA_KH@Z ENDP			; au_request_page
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
meta$ = 32
desc_addr$ = 40
page$ = 48
?x86_64_kmalloc_initialize@@YAHXZ PROC			; x86_64_kmalloc_initialize

; 45   : int x86_64_kmalloc_initialize() {

$LN3:
	sub	rsp, 72					; 00000048H

; 46   : 	uint64_t* page = au_request_page(4);

	mov	ecx, 4
	call	?au_request_page@@YAPEA_KH@Z		; au_request_page
	mov	QWORD PTR page$[rsp], rax

; 47   : 	/* setup the first meta data block */
; 48   : 	uint8_t* desc_addr = (uint8_t*)page;

	mov	rax, QWORD PTR page$[rsp]
	mov	QWORD PTR desc_addr$[rsp], rax

; 49   : 	meta_data_t *meta = (meta_data_t*)desc_addr;

	mov	rax, QWORD PTR desc_addr$[rsp]
	mov	QWORD PTR meta$[rsp], rax

; 50   : 	meta->free = true;

	mov	rax, QWORD PTR meta$[rsp]
	mov	BYTE PTR [rax+16], 1

; 51   : 	meta->next = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+32], 0

; 52   : 	meta->prev = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+40], 0

; 53   : 	meta->magic = MAGIC_FREE;

	mov	rax, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rax], 369500162		; 16062002H

; 54   : 	meta->eob_mark = (desc_addr + 4095);

	mov	rax, QWORD PTR desc_addr$[rsp]
	add	rax, 4095				; 00000fffH
	mov	rcx, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 55   : 	/* meta->size holds only the usable area size for user */
; 56   : 	meta->size = (4*4096) - sizeof(meta_data_t);

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+8], 16336		; 00003fd0H

; 57   : 	first_block = meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR ?first_block@@3PEAU_meta_data_@@EA, rax ; first_block

; 58   : 	last_block = meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR ?last_block@@3PEAU_meta_data_@@EA, rax ; last_block

; 59   : 	return 0;

	xor	eax, eax

; 60   : }

	add	rsp, 72					; 00000048H
	ret	0
?x86_64_kmalloc_initialize@@YAHXZ ENDP			; x86_64_kmalloc_initialize
_TEXT	ENDS
END
