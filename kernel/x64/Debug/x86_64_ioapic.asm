; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ioapic_init@@YAXPEAX@Z				; ioapic_init
PUBLIC	ioapic_register_irq
PUBLIC	ioapic_mask_irq
PUBLIC	ioapic_redirect
PUBLIC	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
EXTRN	setvect:PROC
EXTRN	?read_apic_register@@YA_KG@Z:PROC		; read_apic_register
EXTRN	x86_64_phys_to_virt:PROC
pdata	SEGMENT
$pdata$?ioapic_init@@YAXPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+134
	DD	imagerel $unwind$?ioapic_init@@YAXPEAX@Z
$pdata$ioapic_register_irq DD imagerel $LN3
	DD	imagerel $LN3+264
	DD	imagerel $unwind$ioapic_register_irq
$pdata$ioapic_mask_irq DD imagerel $LN5
	DD	imagerel $LN5+173
	DD	imagerel $unwind$ioapic_mask_irq
$pdata$ioapic_redirect DD imagerel $LN5
	DD	imagerel $LN5+229
	DD	imagerel $unwind$ioapic_redirect
$pdata$?read_ioapic_register@@YAIPEAXE@Z DD imagerel ?read_ioapic_register@@YAIPEAXE@Z
	DD	imagerel ?read_ioapic_register@@YAIPEAXE@Z+67
	DD	imagerel $unwind$?read_ioapic_register@@YAIPEAXE@Z
$pdata$?write_ioapic_register@@YAXPEAXEI@Z DD imagerel ?write_ioapic_register@@YAXPEAXEI@Z
	DD	imagerel ?write_ioapic_register@@YAXPEAXEI@Z+76
	DD	imagerel $unwind$?write_ioapic_register@@YAXPEAXEI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ioapic_init@@YAXPEAX@Z DD 010901H
	DD	08209H
$unwind$ioapic_register_irq DD 011301H
	DD	08213H
$unwind$ioapic_mask_irq DD 010c01H
	DD	0820cH
$unwind$ioapic_redirect DD 011701H
	DD	08217H
$unwind$?read_ioapic_register@@YAIPEAXE@Z DD 010d01H
	DD	0620dH
$unwind$?write_ioapic_register@@YAXPEAXEI@Z DD 011201H
	DD	06212H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_ioapic.cpp
_TEXT	SEGMENT
ioregsel$ = 32
ioregwin$ = 40
apic_base$ = 64
offset$ = 72
val$ = 80
?write_ioapic_register@@YAXPEAXEI@Z PROC		; write_ioapic_register

; 62   : {

	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 63   : 	volatile uint32_t* ioregsel = reinterpret_cast<volatile uint32_t*>(apic_base);

	mov	rax, QWORD PTR apic_base$[rsp]
	mov	QWORD PTR ioregsel$[rsp], rax

; 64   : 	volatile uint32_t* ioregwin = raw_offset<volatile uint32_t*>(apic_base, 0x10);

	mov	edx, 16
	mov	rcx, QWORD PTR apic_base$[rsp]
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR ioregwin$[rsp], rax

; 65   : 	*ioregsel = offset;

	movzx	eax, BYTE PTR offset$[rsp]
	mov	rcx, QWORD PTR ioregsel$[rsp]
	mov	DWORD PTR [rcx], eax

; 66   : 	*ioregwin = val;

	mov	rax, QWORD PTR ioregwin$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax], ecx

; 67   : }

	add	rsp, 56					; 00000038H
	ret	0
?write_ioapic_register@@YAXPEAXEI@Z ENDP		; write_ioapic_register
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\include\stdint.h
;	COMDAT ??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z PROC		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>, COMDAT

; 203  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 204  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 205  : 	};

	ret	0
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z ENDP		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_ioapic.cpp
_TEXT	SEGMENT
ioregsel$ = 32
ioregwin$ = 40
apic_base$ = 64
offset$ = 72
?read_ioapic_register@@YAIPEAXE@Z PROC			; read_ioapic_register

; 52   : {

	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 53   : 	volatile uint32_t* ioregsel = reinterpret_cast<volatile uint32_t*>(apic_base);

	mov	rax, QWORD PTR apic_base$[rsp]
	mov	QWORD PTR ioregsel$[rsp], rax

; 54   : 	volatile uint32_t* ioregwin = raw_offset<volatile uint32_t*>(apic_base, 0x10);

	mov	edx, 16
	mov	rcx, QWORD PTR apic_base$[rsp]
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR ioregwin$[rsp], rax

; 55   : 
; 56   : 	*ioregsel = offset;

	movzx	eax, BYTE PTR offset$[rsp]
	mov	rcx, QWORD PTR ioregsel$[rsp]
	mov	DWORD PTR [rcx], eax

; 57   : 	return *ioregwin;

	mov	rax, QWORD PTR ioregwin$[rsp]
	mov	eax, DWORD PTR [rax]

; 58   : }

	add	rsp, 56					; 00000038H
	ret	0
?read_ioapic_register@@YAIPEAXE@Z ENDP			; read_ioapic_register
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_ioapic.cpp
_TEXT	SEGMENT
ioredtbl$ = 32
ioapic_base$ = 36
tv89 = 40
redirection$ = 48
tv86 = 56
irq$ = 80
gsi$ = 88
flags$ = 96
apic$ = 104
ioapic_redirect PROC

; 102  : void ioapic_redirect(uint8_t irq, uint32_t gsi, uint16_t flags, uint8_t apic) {

$LN5:
	mov	BYTE PTR [rsp+32], r9b
	mov	WORD PTR [rsp+24], r8w
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 72					; 00000048H

; 103  : 	uint32_t ioapic_base = 0xfec00000;

	mov	DWORD PTR ioapic_base$[rsp], -20971520	; fec00000H

; 104  : 	uint64_t redirection = irq + 32;

	movzx	eax, BYTE PTR irq$[rsp]
	add	eax, 32					; 00000020H
	cdqe
	mov	QWORD PTR redirection$[rsp], rax

; 105  : 	if (flags & 2) {

	movzx	eax, WORD PTR flags$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN2@ioapic_red

; 106  : 		redirection |= 1 << 13;

	mov	rax, QWORD PTR redirection$[rsp]
	bts	rax, 13
	mov	QWORD PTR redirection$[rsp], rax
$LN2@ioapic_red:

; 107  : 	}
; 108  : 
; 109  : 
; 110  : 	if (flags & 8) {

	movzx	eax, WORD PTR flags$[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN1@ioapic_red

; 111  : 		redirection |= 1 << 15;

	mov	rax, QWORD PTR redirection$[rsp]
	bts	rax, 15
	mov	QWORD PTR redirection$[rsp], rax
$LN1@ioapic_red:

; 112  : 	}
; 113  : 
; 114  : 	redirection |= ((uint64_t)apic) << 56;

	movzx	eax, BYTE PTR apic$[rsp]
	shl	rax, 56					; 00000038H
	mov	rcx, QWORD PTR redirection$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR redirection$[rsp], rax

; 115  : 
; 116  : 	uint32_t ioredtbl = (gsi - 0) * 2 + 16;

	mov	eax, DWORD PTR gsi$[rsp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR ioredtbl$[rsp], eax

; 117  : 
; 118  : 	write_ioapic_register((void*)x86_64_phys_to_virt(ioapic_base), ioredtbl + 0, (uint32_t)(redirection));

	mov	eax, DWORD PTR ioapic_base$[rsp]
	mov	ecx, eax
	call	x86_64_phys_to_virt
	mov	r8d, DWORD PTR redirection$[rsp]
	movzx	edx, BYTE PTR ioredtbl$[rsp]
	mov	rcx, rax
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 119  : 	write_ioapic_register((void*)x86_64_phys_to_virt(ioapic_base), ioredtbl + 1, (uint32_t)(redirection >> 32));

	mov	rax, QWORD PTR redirection$[rsp]
	shr	rax, 32					; 00000020H
	mov	QWORD PTR tv86[rsp], rax
	mov	ecx, DWORD PTR ioredtbl$[rsp]
	inc	ecx
	mov	DWORD PTR tv89[rsp], ecx
	mov	edx, DWORD PTR ioapic_base$[rsp]
	mov	ecx, edx
	call	x86_64_phys_to_virt
	mov	rcx, QWORD PTR tv86[rsp]
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv89[rsp]
	movzx	edx, cl
	mov	rcx, rax
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 120  : }

	add	rsp, 72					; 00000048H
	ret	0
ioapic_redirect ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_ioapic.cpp
_TEXT	SEGMENT
low$ = 32
reg$ = 36
tv72 = 40
tv69 = 48
irq$ = 80
value$ = 88
ioapic_mask_irq PROC

; 122  : void ioapic_mask_irq(uint8_t irq, bool value){

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 72					; 00000048H

; 123  : 	uint32_t reg = IOAPIC_REG_RED_TBL_BASE + irq * 2;

	movzx	eax, BYTE PTR irq$[rsp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$[rsp], eax

; 124  : 	write_ioapic_register((void*)x86_64_phys_to_virt(0xfec00000), reg + 1, read_apic_register(0x02) << 24);

	mov	cx, 2
	call	?read_apic_register@@YA_KG@Z		; read_apic_register
	shl	rax, 24
	mov	QWORD PTR tv69[rsp], rax
	mov	ecx, DWORD PTR reg$[rsp]
	inc	ecx
	mov	DWORD PTR tv72[rsp], ecx
	mov	ecx, -20971520				; fec00000H
	call	x86_64_phys_to_virt
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv72[rsp]
	movzx	edx, cl
	mov	rcx, rax
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 125  : 	uint32_t low = read_ioapic_register((void*)0xfec00000, reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, -20971520				; fffffffffec00000H
	call	?read_ioapic_register@@YAIPEAXE@Z	; read_ioapic_register
	mov	DWORD PTR low$[rsp], eax

; 126  : 	//!unmask the irq
; 127  : 	if (value)

	movzx	eax, BYTE PTR value$[rsp]
	test	eax, eax
	je	SHORT $LN2@ioapic_mas

; 128  : 		low |= (1 << 16);  //mask

	mov	eax, DWORD PTR low$[rsp]
	bts	eax, 16
	mov	DWORD PTR low$[rsp], eax

; 129  : 	else

	jmp	SHORT $LN1@ioapic_mas
$LN2@ioapic_mas:

; 130  : 		low &= ~(1 << 16); //unmask

	mov	eax, DWORD PTR low$[rsp]
	btr	eax, 16
	mov	DWORD PTR low$[rsp], eax
$LN1@ioapic_mas:

; 131  : 
; 132  : 	write_ioapic_register((void*)x86_64_phys_to_virt(0xfec00000), reg, low);   //vector + 32

	mov	ecx, -20971520				; fec00000H
	call	x86_64_phys_to_virt
	mov	r8d, DWORD PTR low$[rsp]
	movzx	edx, BYTE PTR reg$[rsp]
	mov	rcx, rax
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 133  : }

	add	rsp, 72					; 00000048H
	ret	0
ioapic_mask_irq ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_ioapic.cpp
_TEXT	SEGMENT
low$ = 32
reg$ = 36
tv72 = 40
tv69 = 48
vector$ = 80
fn$ = 88
irq$ = 96
ioapic_register_irq PROC

; 81   : {

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 82   : 	uint32_t reg = IOAPIC_REG_RED_TBL_BASE + irq * 2;

	movzx	eax, BYTE PTR irq$[rsp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$[rsp], eax

; 83   : 	write_ioapic_register((void*)x86_64_phys_to_virt(0xfec00000), reg + 1, read_apic_register(0x02) << 24);

	mov	cx, 2
	call	?read_apic_register@@YA_KG@Z		; read_apic_register
	shl	rax, 24
	mov	QWORD PTR tv69[rsp], rax
	mov	ecx, DWORD PTR reg$[rsp]
	inc	ecx
	mov	DWORD PTR tv72[rsp], ecx
	mov	ecx, -20971520				; fec00000H
	call	x86_64_phys_to_virt
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv72[rsp]
	movzx	edx, cl
	mov	rcx, rax
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 84   : 	uint32_t low = read_ioapic_register((void*)x86_64_phys_to_virt(0xfec00000), reg);

	mov	ecx, -20971520				; fec00000H
	call	x86_64_phys_to_virt
	movzx	edx, BYTE PTR reg$[rsp]
	mov	rcx, rax
	call	?read_ioapic_register@@YAIPEAXE@Z	; read_ioapic_register
	mov	DWORD PTR low$[rsp], eax

; 85   : 	//!unmask the irq
; 86   : 	low &= ~(1 << 16);

	mov	eax, DWORD PTR low$[rsp]
	btr	eax, 16
	mov	DWORD PTR low$[rsp], eax

; 87   : 	//!set to physical delivery mode
; 88   : 	low &= ~(1 << 11);

	mov	eax, DWORD PTR low$[rsp]
	btr	eax, 11
	mov	DWORD PTR low$[rsp], eax

; 89   : 	low &= ~0x700;

	mov	eax, DWORD PTR low$[rsp]
	and	eax, -1793				; fffff8ffH
	mov	DWORD PTR low$[rsp], eax

; 90   : 
; 91   : 	low &= ~0xff;

	mov	eax, DWORD PTR low$[rsp]
	and	eax, -256				; ffffff00H
	mov	DWORD PTR low$[rsp], eax

; 92   : 	low |= vector + 32;

	mov	rax, QWORD PTR vector$[rsp]
	add	rax, 32					; 00000020H
	mov	ecx, DWORD PTR low$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR low$[rsp], eax

; 93   : 
; 94   : 	low |= (0 << 13);

	mov	eax, DWORD PTR low$[rsp]
	mov	DWORD PTR low$[rsp], eax

; 95   : 	low |= (0 << 15);

	mov	eax, DWORD PTR low$[rsp]
	mov	DWORD PTR low$[rsp], eax

; 96   : 
; 97   : 	write_ioapic_register((void*)x86_64_phys_to_virt(0xfec00000), reg, low);   //vector + 32

	mov	ecx, -20971520				; fec00000H
	call	x86_64_phys_to_virt
	mov	r8d, DWORD PTR low$[rsp]
	movzx	edx, BYTE PTR reg$[rsp]
	mov	rcx, rax
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 98   : 	setvect(vector + 32, fn);

	mov	rax, QWORD PTR vector$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, QWORD PTR fn$[rsp]
	mov	rcx, rax
	call	setvect

; 99   : }

	add	rsp, 72					; 00000048H
	ret	0
ioapic_register_irq ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_ioapic.cpp
_TEXT	SEGMENT
reg$1 = 32
ver$ = 36
intr_num$ = 40
n$2 = 48
address$ = 80
?ioapic_init@@YAXPEAX@Z PROC				; ioapic_init

; 137  : {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 138  : 	uint32_t ver = read_ioapic_register(address, IOAPIC_REG_VER);

	mov	dl, 1
	mov	rcx, QWORD PTR address$[rsp]
	call	?read_ioapic_register@@YAIPEAXE@Z	; read_ioapic_register
	mov	DWORD PTR ver$[rsp], eax

; 139  : 	uint32_t intr_num = (ver >> 16) & 0xFF;

	mov	eax, DWORD PTR ver$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR intr_num$[rsp], eax

; 140  : 	for (size_t n = 0; n <= intr_num; ++n)

	mov	QWORD PTR n$2[rsp], 0
	jmp	SHORT $LN3@ioapic_ini
$LN2@ioapic_ini:
	mov	rax, QWORD PTR n$2[rsp]
	inc	rax
	mov	QWORD PTR n$2[rsp], rax
$LN3@ioapic_ini:
	mov	eax, DWORD PTR intr_num$[rsp]
	cmp	QWORD PTR n$2[rsp], rax
	ja	SHORT $LN1@ioapic_ini

; 141  : 	{
; 142  : 		uint32_t reg = IOAPIC_REG_RED_TBL_BASE + n * 2;

	mov	rax, QWORD PTR n$2[rsp]
	lea	rax, QWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$1[rsp], eax

; 143  : 		write_ioapic_register((void*)address, reg, read_ioapic_register(address, reg) | (1 << 16));

	movzx	edx, BYTE PTR reg$1[rsp]
	mov	rcx, QWORD PTR address$[rsp]
	call	?read_ioapic_register@@YAIPEAXE@Z	; read_ioapic_register
	bts	eax, 16
	mov	r8d, eax
	movzx	edx, BYTE PTR reg$1[rsp]
	mov	rcx, QWORD PTR address$[rsp]
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 144  : 	}

	jmp	SHORT $LN2@ioapic_ini
$LN1@ioapic_ini:

; 145  : }

	add	rsp, 72					; 00000048H
	ret	0
?ioapic_init@@YAXPEAX@Z ENDP				; ioapic_init
_TEXT	ENDS
END
