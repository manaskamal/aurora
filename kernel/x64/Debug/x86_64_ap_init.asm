; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?lock@@3HA					; lock
_BSS	SEGMENT
?lock@@3HA DD	01H DUP (?)				; lock
_BSS	ENDS
CONST	SEGMENT
$SG2888	DB	'APIC interrupt ', 0aH, 00H
CONST	ENDS
PUBLIC	?x86_64_ap_init@@YAXXZ				; x86_64_ap_init
PUBLIC	?x86_64_apic_handler@@YAX_KPEAX@Z		; x86_64_apic_handler
EXTRN	?x86_64_cpu_initialize@@YAXXZ:PROC		; x86_64_cpu_initialize
EXTRN	?x86_64_cpu_print_brand@@YAXXZ:PROC		; x86_64_cpu_print_brand
EXTRN	x64_cli:PROC
EXTRN	x64_lock_acquire:PROC
EXTRN	?au_get_boot_info@@YAPEAU_AURORA_INFO_@@XZ:PROC	; au_get_boot_info
EXTRN	?x86_64_initialize_apic@@YAH_N@Z:PROC		; x86_64_initialize_apic
EXTRN	?apic_local_eoi@@YAXXZ:PROC			; apic_local_eoi
EXTRN	?x86_64_ap_started@@YAXXZ:PROC			; x86_64_ap_started
pdata	SEGMENT
$pdata$?x86_64_ap_init@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$?x86_64_ap_init@@YAXXZ
$pdata$?x86_64_apic_handler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?x86_64_apic_handler@@YAX_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?x86_64_ap_init@@YAXXZ DD 010401H
	DD	04204H
$unwind$?x86_64_apic_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_ap_init.cpp
_TEXT	SEGMENT
v$ = 48
p$ = 56
?x86_64_apic_handler@@YAX_KPEAX@Z PROC			; x86_64_apic_handler

; 42   : void x86_64_apic_handler(size_t v, void* p) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 43   : 	au_get_boot_info()->auprint("APIC interrupt \n");

	call	?au_get_boot_info@@YAPEAU_AURORA_INFO_@@XZ ; au_get_boot_info
	lea	rcx, OFFSET FLAT:$SG2888
	call	QWORD PTR [rax+90]

; 44   : 	apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 45   : }

	add	rsp, 40					; 00000028H
	ret	0
?x86_64_apic_handler@@YAX_KPEAX@Z ENDP			; x86_64_apic_handler
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_ap_init.cpp
_TEXT	SEGMENT
?x86_64_ap_init@@YAXXZ PROC				; x86_64_ap_init

; 47   : void x86_64_ap_init() {

$LN5:
	sub	rsp, 40					; 00000028H

; 48   : 	x64_lock_acquire(&lock);

	lea	rcx, OFFSET FLAT:?lock@@3HA		; lock
	call	x64_lock_acquire

; 49   : 	x64_cli();

	call	x64_cli

; 50   : 	x86_64_cpu_initialize();

	call	?x86_64_cpu_initialize@@YAXXZ		; x86_64_cpu_initialize

; 51   : 	x86_64_initialize_apic(false);

	xor	ecx, ecx
	call	?x86_64_initialize_apic@@YAH_N@Z	; x86_64_initialize_apic

; 52   : 	x86_64_cpu_print_brand();

	call	?x86_64_cpu_print_brand@@YAXXZ		; x86_64_cpu_print_brand

; 53   : 	lock = 0;

	mov	DWORD PTR ?lock@@3HA, 0			; lock

; 54   : 	x86_64_ap_started();

	call	?x86_64_ap_started@@YAXXZ		; x86_64_ap_started
$LN2@x86_64_ap_:

; 55   : 	for (;;);

	jmp	SHORT $LN2@x86_64_ap_

; 56   : }

	add	rsp, 40					; 00000028H
	ret	0
?x86_64_ap_init@@YAXXZ ENDP				; x86_64_ap_init
_TEXT	ENDS
END
