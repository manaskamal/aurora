; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?info@@3U_AURORA_INFO_@@A			; info
PUBLIC	_fltused
_BSS	SEGMENT
?info@@3U_AURORA_INFO_@@A DB 062H DUP (?)		; info
	ALIGN	8

thr_lock DQ	01H DUP (?)
t_lock	DQ	01H DUP (?)
i_	DQ	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG3526	DB	'Thr2', 0aH, 00H
	ORG $+2
$SG3530	DB	'Aurora Kernel ', 0aH, 00H
$SG3533	DB	'Aurora kernel started ', 0aH, 00H
$SG3536	DB	'Thr addr -> %x , rsp -> %x', 0aH, 00H
	ORG $+4
$SG3539	DB	'Thread2-> %x, rsp ->%x', 0aH, 00H
CONST	ENDS
_DATA	SEGMENT
_fltused DD	01H
_DATA	ENDS
PUBLIC	?au_get_boot_info@@YAPEAU_AURORA_INFO_@@XZ	; au_get_boot_info
PUBLIC	?thread_test@@YAXXZ				; thread_test
PUBLIC	?thread_test2@@YAXXZ				; thread_test2
PUBLIC	?_kmain@@YAHPEAU_AURORA_INFO_@@@Z		; _kmain
EXTRN	?x86_64_pmmngr_init@@YAXPEAU_AURORA_INFO_@@@Z:PROC ; x86_64_pmmngr_init
EXTRN	x86_64_pmmngr_alloc:PROC
EXTRN	x64_cli:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	?x86_64_cpu_initialize@@YAX_N@Z:PROC		; x86_64_cpu_initialize
EXTRN	printf:PROC
EXTRN	?x86_64_paging_init@@YAHXZ:PROC			; x86_64_paging_init
EXTRN	x86_64_create_kthread:PROC
EXTRN	?x86_64_initialize_scheduler@@YAHXZ:PROC	; x86_64_initialize_scheduler
EXTRN	?x86_64_sched_start@@YAXXZ:PROC			; x86_64_sched_start
EXTRN	memcpy:PROC
EXTRN	?au_fb_initialize@@YAHXZ:PROC			; au_fb_initialize
EXTRN	?au_initialize_serial@@YAHXZ:PROC		; au_initialize_serial
EXTRN	?au_initialize_acpi@@YAHXZ:PROC			; au_initialize_acpi
EXTRN	?x86_64_kmalloc_initialize@@YAHXZ:PROC		; x86_64_kmalloc_initialize
EXTRN	?vfs_initialize@@YAXXZ:PROC			; vfs_initialize
EXTRN	?devfs_initialize@@YAXXZ:PROC			; devfs_initialize
pdata	SEGMENT
$pdata$?thread_test2@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+30
	DD	imagerel $unwind$?thread_test2@@YAXXZ
$pdata$?_kmain@@YAHPEAU_AURORA_INFO_@@@Z DD imagerel $LN5
	DD	imagerel $LN5+313
	DD	imagerel $unwind$?_kmain@@YAHPEAU_AURORA_INFO_@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?thread_test2@@YAXXZ DD 010401H
	DD	04204H
$unwind$?_kmain@@YAHPEAU_AURORA_INFO_@@@Z DD 010901H
	DD	0a209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\main.cpp
_TEXT	SEGMENT
au_status$ = 32
thr$ = 40
thr2$ = 48
tv78 = 56
tv89 = 64
bootinfo$ = 96
?_kmain@@YAHPEAU_AURORA_INFO_@@@Z PROC			; _kmain

; 84   : int _kmain(aurora_info_t *bootinfo) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 85   : 	bootinfo->auprint("Aurora Kernel \n");

	lea	rcx, OFFSET FLAT:$SG3530
	mov	rax, QWORD PTR bootinfo$[rsp]
	call	QWORD PTR [rax+90]

; 86   : 	memcpy(&info, bootinfo, sizeof(aurora_info_t));

	mov	r8d, 98					; 00000062H
	mov	rdx, QWORD PTR bootinfo$[rsp]
	lea	rcx, OFFSET FLAT:?info@@3U_AURORA_INFO_@@A ; info
	call	memcpy

; 87   : 	x64_cli();

	call	x64_cli

; 88   : 	int au_status = 0;

	mov	DWORD PTR au_status$[rsp], 0

; 89   : 
; 90   : 	x86_64_pmmngr_init(bootinfo);

	mov	rcx, QWORD PTR bootinfo$[rsp]
	call	?x86_64_pmmngr_init@@YAXPEAU_AURORA_INFO_@@@Z ; x86_64_pmmngr_init

; 91   : 	au_status = x86_64_paging_init();

	call	?x86_64_paging_init@@YAHXZ		; x86_64_paging_init
	mov	DWORD PTR au_status$[rsp], eax

; 92   : 	au_status = x86_64_kmalloc_initialize();

	call	?x86_64_kmalloc_initialize@@YAHXZ	; x86_64_kmalloc_initialize
	mov	DWORD PTR au_status$[rsp], eax

; 93   : 	x86_64_cpu_initialize(true);

	mov	cl, 1
	call	?x86_64_cpu_initialize@@YAX_N@Z		; x86_64_cpu_initialize

; 94   : 
; 95   : 	/* initialize early drivers*/
; 96   : 	au_status = au_fb_initialize();

	call	?au_fb_initialize@@YAHXZ		; au_fb_initialize
	mov	DWORD PTR au_status$[rsp], eax

; 97   : 	au_status = au_initialize_serial();

	call	?au_initialize_serial@@YAHXZ		; au_initialize_serial
	mov	DWORD PTR au_status$[rsp], eax

; 98   : 	au_status = au_initialize_acpi();

	call	?au_initialize_acpi@@YAHXZ		; au_initialize_acpi
	mov	DWORD PTR au_status$[rsp], eax

; 99   : 	/* initialize the kernel subsystems */
; 100  : 	vfs_initialize();

	call	?vfs_initialize@@YAXXZ			; vfs_initialize

; 101  : 	devfs_initialize();

	call	?devfs_initialize@@YAXXZ		; devfs_initialize

; 102  : 
; 103  : 	//x86_64_setup_cpu_data(0);
; 104  : 	//x86_64_boot_free();
; 105  :     x86_64_initialize_scheduler();

	call	?x86_64_initialize_scheduler@@YAHXZ	; x86_64_initialize_scheduler

; 106  : 	
; 107  : #ifdef SMP
; 108  : 	/* initialize all the AP's*/
; 109  : 	initialize_cpu(au_acpi_get_num_core());
; 110  : #endif
; 111  : 
; 112  : 	printf("Aurora kernel started \n");

	lea	rcx, OFFSET FLAT:$SG3533
	call	printf

; 113  : 
; 114  : 	/* Start Scheduler, and notify all cpu's 
; 115  : 	 * that scheduler has started and they can
; 116  : 	 * start their jobs
; 117  : 	 */
; 118  : 
; 119  : 	thread_t *thr = x86_64_create_kthread(thread_test, ((uint64_t)x86_64_pmmngr_alloc() + 4096), x64_read_cr3());

	call	x64_read_cr3
	mov	QWORD PTR tv78[rsp], rax
	call	x86_64_pmmngr_alloc
	add	rax, 4096				; 00001000H
	mov	rcx, QWORD PTR tv78[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?thread_test@@YAXXZ	; thread_test
	call	x86_64_create_kthread
	mov	QWORD PTR thr$[rsp], rax

; 120  : 	printf("Thr addr -> %x , rsp -> %x\n", thr, thr->rsp);

	mov	rax, QWORD PTR thr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR thr$[rsp]
	lea	rcx, OFFSET FLAT:$SG3536
	call	printf

; 121  : 	thread_t *thr2 = x86_64_create_kthread(thread_test2,((uint64_t)x86_64_pmmngr_alloc() + 4096), x64_read_cr3());

	call	x64_read_cr3
	mov	QWORD PTR tv89[rsp], rax
	call	x86_64_pmmngr_alloc
	add	rax, 4096				; 00001000H
	mov	rcx, QWORD PTR tv89[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?thread_test2@@YAXXZ	; thread_test2
	call	x86_64_create_kthread
	mov	QWORD PTR thr2$[rsp], rax

; 122  : 	printf("Thread2-> %x, rsp ->%x\n", thr2, thr2->rsp);

	mov	rax, QWORD PTR thr2$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR thr2$[rsp]
	lea	rcx, OFFSET FLAT:$SG3539
	call	printf

; 123  : 	x86_64_sched_start();

	call	?x86_64_sched_start@@YAXXZ		; x86_64_sched_start
$LN2@kmain:

; 124  : 	for (;;);

	jmp	SHORT $LN2@kmain

; 125  : 	return 0;

	xor	eax, eax

; 126  : }

	add	rsp, 88					; 00000058H
	ret	0
?_kmain@@YAHPEAU_AURORA_INFO_@@@Z ENDP			; _kmain
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\main.cpp
_TEXT	SEGMENT
?thread_test2@@YAXXZ PROC				; thread_test2

; 76   : void thread_test2() {

$LN5:
	sub	rsp, 40					; 00000028H
$LN2@thread_tes:

; 77   : 	while (1) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@thread_tes

; 78   : 		printf("Thr2\n");

	lea	rcx, OFFSET FLAT:$SG3526
	call	printf

; 79   : 	}

	jmp	SHORT $LN2@thread_tes
$LN1@thread_tes:

; 80   : 
; 81   : }

	add	rsp, 40					; 00000028H
	ret	0
?thread_test2@@YAXXZ ENDP				; thread_test2
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\main.cpp
_TEXT	SEGMENT
?thread_test@@YAXXZ PROC				; thread_test

; 66   : void thread_test() {

	npad	2
$LN2@thread_tes:

; 67   : 	//x64_lock_acquire(&t_lock);
; 68   : 	//t_lock = 0;
; 69   : 	//printf("Thr test cleared \n");
; 70   : 	while (1){

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@thread_tes

; 71   : 	}

	jmp	SHORT $LN2@thread_tes
$LN1@thread_tes:

; 72   : }

	ret	0
?thread_test@@YAXXZ ENDP				; thread_test
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\main.cpp
_TEXT	SEGMENT
?au_get_boot_info@@YAPEAU_AURORA_INFO_@@XZ PROC		; au_get_boot_info

; 56   : 	return &info;

	lea	rax, OFFSET FLAT:?info@@3U_AURORA_INFO_@@A ; info

; 57   : }

	ret	0
?au_get_boot_info@@YAPEAU_AURORA_INFO_@@XZ ENDP		; au_get_boot_info
_TEXT	ENDS
END
