; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?x86_64_pic_clear_mask@@YAXE@Z			; x86_64_pic_clear_mask
PUBLIC	?x86_64_pic_eoi@@YAXI@Z				; x86_64_pic_eoi
PUBLIC	?x86_64_pic_initialize@@YAXXZ			; x86_64_pic_initialize
EXTRN	x64_inportb:PROC
EXTRN	x64_outportb:PROC
EXTRN	?x86_64_pit_initialize@@YAXXZ:PROC		; x86_64_pit_initialize
pdata	SEGMENT
$pdata$?x86_64_pic_clear_mask@@YAXE@Z DD imagerel $LN5
	DD	imagerel $LN5+107
	DD	imagerel $unwind$?x86_64_pic_clear_mask@@YAXE@Z
$pdata$?x86_64_pic_eoi@@YAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$?x86_64_pic_eoi@@YAXI@Z
$pdata$?x86_64_pic_initialize@@YAXXZ DD imagerel $LN27
	DD	imagerel $LN27+435
	DD	imagerel $unwind$?x86_64_pic_initialize@@YAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?x86_64_pic_clear_mask@@YAXE@Z DD 010801H
	DD	06208H
$unwind$?x86_64_pic_eoi@@YAXI@Z DD 010801H
	DD	04208H
$unwind$?x86_64_pic_initialize@@YAXXZ DD 010401H
	DD	0a204H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_pic.cpp
_TEXT	SEGMENT
base1$ = 32
a1$ = 33
base0$ = 34
a2$ = 35
i$1 = 36
i$2 = 40
i$3 = 44
i$4 = 48
i$5 = 52
i$6 = 56
i$7 = 60
i$8 = 64
?x86_64_pic_initialize@@YAXXZ PROC			; x86_64_pic_initialize

; 64   : void x86_64_pic_initialize() {

$LN27:
	sub	rsp, 88					; 00000058H

; 65   : 	uint8_t base0 = 0x20;

	mov	BYTE PTR base0$[rsp], 32		; 00000020H

; 66   : 	uint8_t base1 = 0x28;

	mov	BYTE PTR base1$[rsp], 40		; 00000028H

; 67   : 
; 68   : 	unsigned char a1, a2;
; 69   : 	a1 = x64_inportb(PIC1_DATA);

	mov	cx, 33					; 00000021H
	call	x64_inportb
	mov	BYTE PTR a1$[rsp], al

; 70   : 	a2 = x64_inportb(PIC2_DATA);

	mov	cx, 161					; 000000a1H
	call	x64_inportb
	mov	BYTE PTR a2$[rsp], al

; 71   : 
; 72   : 	x64_outportb(PIC1_COMMAND, ICW1_INIT | ICW1_ICW4);

	mov	dl, 17
	mov	cx, 32					; 00000020H
	call	x64_outportb

; 73   : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN24@x86_64_pic
$LN23@x86_64_pic:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN24@x86_64_pic:
	cmp	DWORD PTR i$3[rsp], 1000		; 000003e8H
	jge	SHORT $LN22@x86_64_pic

; 74   : 		;

	jmp	SHORT $LN23@x86_64_pic
$LN22@x86_64_pic:

; 75   : 	x64_outportb(PIC2_COMMAND, ICW1_INIT | ICW1_ICW4);

	mov	dl, 17
	mov	cx, 160					; 000000a0H
	call	x64_outportb

; 76   : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@x86_64_pic
$LN20@x86_64_pic:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@x86_64_pic:
	cmp	DWORD PTR i$1[rsp], 1000		; 000003e8H
	jge	SHORT $LN19@x86_64_pic

; 77   : 		;

	jmp	SHORT $LN20@x86_64_pic
$LN19@x86_64_pic:

; 78   : 	x64_outportb(PIC1_DATA, base0);

	movzx	edx, BYTE PTR base0$[rsp]
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 79   : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$7[rsp], 0
	jmp	SHORT $LN18@x86_64_pic
$LN17@x86_64_pic:
	mov	eax, DWORD PTR i$7[rsp]
	inc	eax
	mov	DWORD PTR i$7[rsp], eax
$LN18@x86_64_pic:
	cmp	DWORD PTR i$7[rsp], 1000		; 000003e8H
	jge	SHORT $LN16@x86_64_pic

; 80   : 		;

	jmp	SHORT $LN17@x86_64_pic
$LN16@x86_64_pic:

; 81   : 	x64_outportb(PIC2_DATA, base1);

	movzx	edx, BYTE PTR base1$[rsp]
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 82   : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN15@x86_64_pic
$LN14@x86_64_pic:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN15@x86_64_pic:
	cmp	DWORD PTR i$5[rsp], 1000		; 000003e8H
	jge	SHORT $LN13@x86_64_pic

; 83   : 		;

	jmp	SHORT $LN14@x86_64_pic
$LN13@x86_64_pic:

; 84   : 	x64_outportb(PIC1_DATA, 4);

	mov	dl, 4
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 85   : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN12@x86_64_pic
$LN11@x86_64_pic:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN12@x86_64_pic:
	cmp	DWORD PTR i$2[rsp], 1000		; 000003e8H
	jge	SHORT $LN10@x86_64_pic

; 86   : 		;

	jmp	SHORT $LN11@x86_64_pic
$LN10@x86_64_pic:

; 87   : 	x64_outportb(PIC2_DATA, 2);

	mov	dl, 2
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 88   : 
; 89   : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN9@x86_64_pic
$LN8@x86_64_pic:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN9@x86_64_pic:
	cmp	DWORD PTR i$4[rsp], 1000		; 000003e8H
	jge	SHORT $LN7@x86_64_pic

; 90   : 		;

	jmp	SHORT $LN8@x86_64_pic
$LN7@x86_64_pic:

; 91   : 
; 92   : 	x64_outportb(PIC1_DATA, ICW4_8086);

	mov	dl, 1
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 93   : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN6@x86_64_pic
$LN5@x86_64_pic:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN6@x86_64_pic:
	cmp	DWORD PTR i$6[rsp], 1000		; 000003e8H
	jge	SHORT $LN4@x86_64_pic

; 94   : 		;

	jmp	SHORT $LN5@x86_64_pic
$LN4@x86_64_pic:

; 95   : 
; 96   : 	x64_outportb(PIC2_DATA, ICW4_8086);

	mov	dl, 1
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 97   : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$8[rsp], 0
	jmp	SHORT $LN3@x86_64_pic
$LN2@x86_64_pic:
	mov	eax, DWORD PTR i$8[rsp]
	inc	eax
	mov	DWORD PTR i$8[rsp], eax
$LN3@x86_64_pic:
	cmp	DWORD PTR i$8[rsp], 1000		; 000003e8H
	jge	SHORT $LN1@x86_64_pic

; 98   : 		;

	jmp	SHORT $LN2@x86_64_pic
$LN1@x86_64_pic:

; 99   : 
; 100  : 	x64_outportb(PIC1_DATA, a1);

	movzx	edx, BYTE PTR a1$[rsp]
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 101  : 	x64_outportb(PIC2_DATA, a2);

	movzx	edx, BYTE PTR a2$[rsp]
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 102  : 
; 103  : 	
; 104  : 	x86_64_pit_initialize();

	call	?x86_64_pit_initialize@@YAXXZ		; x86_64_pit_initialize

; 105  : 	x86_64_pic_clear_mask(0);

	xor	ecx, ecx
	call	?x86_64_pic_clear_mask@@YAXE@Z		; x86_64_pic_clear_mask

; 106  : }

	add	rsp, 88					; 00000058H
	ret	0
?x86_64_pic_initialize@@YAXXZ ENDP			; x86_64_pic_initialize
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_pic.cpp
_TEXT	SEGMENT
intno$ = 48
?x86_64_pic_eoi@@YAXI@Z PROC				; x86_64_pic_eoi

; 53   : void x86_64_pic_eoi(unsigned int intno) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 54   : 
; 55   : 	if (intno > 16)

	cmp	DWORD PTR intno$[rsp], 16
	jbe	SHORT $LN2@x86_64_pic

; 56   : 		return;

	jmp	SHORT $LN3@x86_64_pic
$LN2@x86_64_pic:

; 57   : 
; 58   : 	if (intno >= 8)

	cmp	DWORD PTR intno$[rsp], 8
	jb	SHORT $LN1@x86_64_pic

; 59   : 		x64_outportb(PIC2_COMMAND, PIC_EOI);

	mov	dl, 32					; 00000020H
	mov	cx, 160					; 000000a0H
	call	x64_outportb
$LN1@x86_64_pic:

; 60   : 
; 61   : 	x64_outportb(PIC1_COMMAND, PIC_EOI);

	mov	dl, 32					; 00000020H
	mov	cx, 32					; 00000020H
	call	x64_outportb
$LN3@x86_64_pic:

; 62   : }

	add	rsp, 40					; 00000028H
	ret	0
?x86_64_pic_eoi@@YAXI@Z ENDP				; x86_64_pic_eoi
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\aurora kernel\kernel\arch\x86_64\x86_64_pic.cpp
_TEXT	SEGMENT
value$ = 32
port$ = 36
irq$ = 64
?x86_64_pic_clear_mask@@YAXE@Z PROC			; x86_64_pic_clear_mask

; 36   : void x86_64_pic_clear_mask(unsigned char irq) {

$LN5:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 37   : 	uint16_t port;
; 38   : 	uint8_t value;
; 39   : 
; 40   : 	if (irq < 8) {

	movzx	eax, BYTE PTR irq$[rsp]
	cmp	eax, 8
	jge	SHORT $LN2@x86_64_pic

; 41   : 		port = PIC1_DATA;

	mov	eax, 33					; 00000021H
	mov	WORD PTR port$[rsp], ax

; 42   : 	}
; 43   : 	else {

	jmp	SHORT $LN1@x86_64_pic
$LN2@x86_64_pic:

; 44   : 		port = PIC2_DATA;

	mov	eax, 161				; 000000a1H
	mov	WORD PTR port$[rsp], ax

; 45   : 		irq -= 8;

	movzx	eax, BYTE PTR irq$[rsp]
	sub	eax, 8
	mov	BYTE PTR irq$[rsp], al
$LN1@x86_64_pic:

; 46   : 	}
; 47   : 
; 48   : 	value = x64_inportb(port) & ~(1 << irq);

	movzx	ecx, WORD PTR port$[rsp]
	call	x64_inportb
	movzx	eax, al
	movzx	ecx, BYTE PTR irq$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	not	ecx
	and	eax, ecx
	mov	BYTE PTR value$[rsp], al

; 49   : 	x64_outportb(port, value);

	movzx	edx, BYTE PTR value$[rsp]
	movzx	ecx, WORD PTR port$[rsp]
	call	x64_outportb

; 50   : }

	add	rsp, 56					; 00000038H
	ret	0
?x86_64_pic_clear_mask@@YAXE@Z ENDP			; x86_64_pic_clear_mask
_TEXT	ENDS
END
